name: Docker Image CI

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up yarn cache
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: .yarn/cache
        key: ${{ runner.os }}-dockerimage-yarn-${{ github.ref }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-dockerimage-yarn-${{ github.ref }}-
          ${{ runner.os }}-dockerimage-yarn-
    - name: Set up webpack cache
      uses: actions/cache@v2
      id: webpack-cache # use this to check for `cache-hit` (`steps.webpack-cache.outputs.cache-hit != 'true'`)
      with:
        path: build-cache
        key: ${{ runner.os }}-dockerimage-webpack-${{ github.ref }}
        restore-keys: |
          ${{ runner.os }}-dockerimage-webpack-${{ github.ref }}-
          ${{ runner.os }}-dockerimage-webpack-
    - name: install node v14
      uses: actions/setup-node@v2
      with:
        node-version: 14
    - name: yarn install
      run: yarn install
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DockerHubUsername }}
        password: ${{ secrets.DockerHubPassword }}
    - name: Build webpack bundle
      run: yarn run build
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@master
    - # Temp fix, see below
      name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        load: true
        push: true
        target: production
        tags: |
          neinteractiveliterature/intercode:latest
          neinteractiveliterature/intercode:${{ github.sha }}
        # TODO: put this back once it gets working again
        # cache-from: type=gha
        # cache-to: type=gha,mode=max
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        # Push to Heroku if on main
    - name: Log into Heroku Container Registry
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
      env:
        HEROKU_API_TOKEN: ${{ secrets.HerokuApiToken }}
      run: echo "$HEROKU_API_TOKEN" | docker login --username=_ --password-stdin registry.heroku.com
    - name: Tag production image as "web"
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
      run: docker tag neinteractiveliterature/intercode:${{ github.sha }} registry.heroku.com/intercode/web
    - name: Push "web" image to Heroku Container Registry
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
      run: docker push registry.heroku.com/intercode/web
    - name: Build "release" image
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
      run: docker buildx build -t registry.heroku.com/intercode/release
        --build-arg INTERCODE_TAG=${{ github.sha }}
        --build-arg REVISION=${{ github.sha }}
        -f Dockerfile.release
        --push
        .
    - name: Build and push "shoryuken" image
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
      run: docker buildx build -t registry.heroku.com/intercode/shoryuken
        --build-arg INTERCODE_TAG=${{ github.sha }}
        -f Dockerfile.shoryuken
        --push
        .
    -
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
