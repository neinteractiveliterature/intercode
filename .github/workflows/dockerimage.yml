name: Docker Image CI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
      - buildkit

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Docker Buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest
    - name: Log into Github Package Registry
      env:
        GITHUB_PACKAGE_REGISTRY_USERNAME: ${{ secrets.GithubPackageRegistryUsername }}
        GITHUB_PACKAGE_REGISTRY_PASSWORD: ${{ secrets.GithubPackageRegistryPassword }}
      run: echo "$GITHUB_PACKAGE_REGISTRY_PASSWORD" | docker login docker.pkg.github.com -u "$GITHUB_PACKAGE_REGISTRY_USERNAME" --password-stdin
    - name: Pull Docker images for build
      run: docker pull docker.pkg.github.com/${GITHUB_REPOSITORY}/intercode:build-production-master || true
    - name: Build the "local-build-production" Docker image
      run: docker buildx build .
        --build-arg ASSETS_HOST=assets.neilhosting.net
        --cache-from docker.pkg.github.com/${GITHUB_REPOSITORY}/intercode:build-production-master
        --target build-production
        --tag local-build-production

    # Push to Github Package Registry if on master
    - name: Tag build-production for Github Package Registry
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      run: docker tag local-build-production docker.pkg.github.com/${GITHUB_REPOSITORY}/intercode:build-production-master
    - name: Push build-production to Github Package Registry
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      run: docker push docker.pkg.github.com/${GITHUB_REPOSITORY}/intercode:build-production-master

    # Run the tests
    - name: Build the "test" Docker image
      run: docker buildx build .
        --output=type=image,push=false
        --build-arg ASSETS_HOST=assets.neilhosting.net
        --cache-from local-build-production
        --target test
        --tag local-test
    - name: Run tests
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CodeClimateTestReporterId }}
        DOCKER_CLI_EXPERIMENTAL: enabled
      run: docker-compose -f docker-compose.test.yml run
        -e GIT_COMMIT_SHA=${GITHUB_SHA} -e GIT_BRANCH=${GITHUB_REF}
        -e GIT_COMMITTED_AT=$(git log -1 --pretty=format:%ct)
        -e CC_TEST_REPORTER_ID=$CC_TEST_REPORTER_ID
        web
        test/travis-complete.sh

    # Build and publish the production image if on master
    - name: Log into Docker Hub
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DockerHubUsername }}
        DOCKER_HUB_PASSWORD: ${{ secrets.DockerHubPassword }}
      run: echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
    - name: Build the "local-production" Docker image
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      run: docker buildx build .
        --output=type=image,push=false
        --build-arg ASSETS_HOST=assets.neilhosting.net
        --cache-from local-build-production
        --target production
        --tag local-production
    - name: Tag the production image with the SHA
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      run: docker tag local-production ${GITHUB_REPOSITORY}:${GITHUB_SHA}
    - name: Tag the production image "latest"
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      run: docker tag local-production ${GITHUB_REPOSITORY}:latest
    - name: Push the SHA tag to Docker Hub
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      run: docker push ${GITHUB_REPOSITORY}:${GITHUB_SHA}
    - name: Push "latest" to Docker Hub
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      run: docker push ${GITHUB_REPOSITORY}:latest

    # Push to Heroku if on master
    - name: Log into Heroku Container Registry
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      env:
        HEROKU_API_TOKEN: ${{ secrets.HerokuApiToken }}
      run: echo "$HEROKU_API_TOKEN" | docker login --username=_ --password-stdin registry.heroku.com
    - name: Tag production image as "web"
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      run: docker tag local-production registry.heroku.com/intercode/web
    - name: Build "release" image
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      run: docker buildx build -t registry.heroku.com/intercode/release
        --build-arg INTERCODE_TAG=${GITHUB_SHA}
        --build-arg REVISION=${GITHUB_SHA}
        -f Dockerfile.release
        .
    - name: Build "shoryuken" image
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      run: docker buildx build -t registry.heroku.com/intercode/shoryuken
        --build-arg INTERCODE_TAG=${GITHUB_SHA}
        -f Dockerfile.shoryuken
        .
    - name: Push "web" image to Heroku Container Registry
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      run: docker push registry.heroku.com/intercode/web
    - name: Push "release" image to Heroku Container Registry
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      run: docker push registry.heroku.com/intercode/release
    - name: Push "shoryuken" image to Heroku Container Registry
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
      run: docker push registry.heroku.com/intercode/shoryuken

# I wrote these for debugging why the cache wasn't being used, come to find out, it was being used
#     - name: Download container-diff
#       run: curl -LO https://storage.googleapis.com/container-diff/latest/container-diff-linux-amd64 && chmod +x container-diff-linux-amd64
#     - name: Diff the images
#       run: ./container-diff-linux-amd64 diff docker.pkg.github.com/${GITHUB_REPOSITORY}/intercode:build-production-master daemon://local-build-production
