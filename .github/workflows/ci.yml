name: Continuous integration

on:
  push:
    branches:
      - main
  pull_request: {}

jobs:
  graphql-codegen:
    name: graphql-codegen
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: install node
      uses: actions/setup-node@v3
      with:
        cache: yarn
    - name: yarn install
      run: yarn install
    - name: graphql-codegen
      run: yarn run graphql:codegen
    - name: tsc on resulting generated files
      run: yarn run tsc --noEmit
  tsc:
    name: tsc
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: install node
      uses: actions/setup-node@v3
      with:
        cache: yarn
    - name: yarn install
      run: yarn install
    - name: tsc
      run: yarn run tsc --noEmit
  jest:
    name: jest
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: install node
      uses: actions/setup-node@v3
      with:
        cache: yarn
    - name: yarn install
      run: yarn install
    - name: build
      run: yarn run test
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v2
      if: always() # always run even if the previous step fails
      with:
        check_name: 'Jest Report'
        report_paths: 'test/reports/TEST-*.xml'
    - name: Archive HTML test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: test/html_reports
  minitest:
    name: minitest
    runs-on: ubuntu-latest
    env:
      TEST_DATABASE_URL: postgres://postgres:postgres@localhost/intercode_test
      RAILS_ENV: test
    services:
      postgres:
        image: postgres:13.4
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - name: Install libvips42
        run: sudo apt-get update && sudo apt-get install libvips42
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Database setup
        run: bundle exec rails db:create db:migrate
      - name: Run tests
        run: TERM=xterm-color bundle exec rails test
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v2
        if: always() # always run even if the previous step fails
        with:
          check_name: 'Minitest Report'
          report_paths: 'test/reports/TEST-*.xml'
      - name: Archive HTML test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports
          path: test/html_reports
  docker-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up webpack cache
      uses: actions/cache@v2
      id: webpack-cache # use this to check for `cache-hit` (`steps.webpack-cache.outputs.cache-hit != 'true'`)
      with:
        path: build-cache
        key: ${{ runner.os }}-dockerimage-webpack-${{ github.ref }}
        restore-keys: |
          ${{ runner.os }}-dockerimage-webpack-${{ github.ref }}-
          ${{ runner.os }}-dockerimage-webpack-
    - name: install node
      uses: actions/setup-node@v3
      with:
        cache: yarn
    - name: yarn install
      run: yarn install
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DockerHubUsername }}
        password: ${{ secrets.DockerHubPassword }}
    - name: Build webpack bundle
      run: yarn run build
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@master
    - name: Read .ruby-version
      id: ruby-version
      run: echo "::set-output name=ruby-version::$(cat .ruby-version)"
    - name: Read .node-version
      id: node-version
      run: echo "::set-output name=node-version::$(cat .node-version)"
    - name: Build (and push to Docker Hub, if on main)
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        push: ${{ github.event_name == 'push' && github.event.ref == 'refs/heads/main' }}
        target: production
        tags: |
          neinteractiveliterature/intercode:${{ github.sha }}
        build-args: |
          RUBY_VERSION=${{ steps.ruby-version.outputs.ruby-version }}
          NODE_VERSION=${{ steps.node-version.outputs.node-version }}
        cache-from: type=gha,scope=${{ github.workflow }}
        cache-to: type=gha,mode=max,scope=${{ github.workflow }}
  doc-site:
    uses: ./.github/workflows/build-doc-site.yml
  update-release-draft:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
    steps:
      - uses: release-drafter/release-drafter@v5
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        # with:
        #   config-name: my-config.yml
        #   disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
