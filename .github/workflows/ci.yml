name: Continuous integration

on:
  push:
    branches:
      - main
  pull_request: {}

jobs:
  graphql-codegen:
    name: graphql-codegen
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up yarn cache
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: .yarn/cache
        key: ${{ runner.os }}-tsc-yarn-${{ github.ref }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-tsc-yarn-${{ github.ref }}-
          ${{ runner.os }}-tsc-yarn-
    - name: install node v14
      uses: actions/setup-node@v2
      with:
        node-version: 14
    - name: yarn install
      run: yarn install
    - name: graphql-codegen
      run: yarn run graphql:codegen
    - name: tsc on resulting generated files
      run: yarn run tsc --noEmit
  tsc:
    name: tsc
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up yarn cache
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: .yarn/cache
        key: ${{ runner.os }}-tsc-yarn-${{ github.ref }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-tsc-yarn-${{ github.ref }}-
          ${{ runner.os }}-tsc-yarn-
    - name: install node v14
      uses: actions/setup-node@v2
      with:
        node-version: 14
    - name: yarn install
      run: yarn install
    - name: tsc
      run: yarn run tsc --noEmit
  jest:
    name: jest
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up yarn cache
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: .yarn/cache
        key: ${{ runner.os }}-tsc-yarn-${{ github.ref }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-tsc-yarn-${{ github.ref }}-
          ${{ runner.os }}-tsc-yarn-
    - name: install node v14
      uses: actions/setup-node@v2
      with:
        node-version: 14
    - name: yarn install
      run: yarn install
    - name: build
      run: yarn run test
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v2
      if: always() # always run even if the previous step fails
      with:
        report_paths: 'test/reports/TEST-*.xml'
    - name: Archive HTML test reports
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test-reports
        path: test/html_reports
  webpack:
    name: webpack
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up yarn cache
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: .yarn/cache
        key: ${{ runner.os }}-tsc-yarn-${{ github.ref }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-tsc-yarn-${{ github.ref }}-
          ${{ runner.os }}-tsc-yarn-
    - name: install node v14
      uses: actions/setup-node@v2
      with:
        node-version: 14
    - name: yarn install
      run: yarn install
    - name: build
      run: yarn run build
  minitest:
    name: minitest
    runs-on: ubuntu-latest
    env:
      TEST_DATABASE_URL: postgres://postgres:postgres@localhost/intercode_test
      RAILS_ENV: test
    services:
      postgres:
        image: postgres:13.4
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: Install libvips42
        run: sudo apt-get update && sudo apt-get install libvips42
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Database setup
        run: bundle exec rails db:create db:migrate
      - name: Run tests
        run: TERM=xterm-color bundle exec rails test
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v2
        if: always() # always run even if the previous step fails
        with:
          report_paths: 'test/reports/TEST-*.xml'
      - name: Archive HTML test reports
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-reports
          path: test/html_reports
  docker-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up yarn cache
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: .yarn/cache
        key: ${{ runner.os }}-dockerimage-yarn-${{ github.ref }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-dockerimage-yarn-${{ github.ref }}-
          ${{ runner.os }}-dockerimage-yarn-
    - name: Set up webpack cache
      uses: actions/cache@v2
      id: webpack-cache # use this to check for `cache-hit` (`steps.webpack-cache.outputs.cache-hit != 'true'`)
      with:
        path: build-cache
        key: ${{ runner.os }}-dockerimage-webpack-${{ github.ref }}
        restore-keys: |
          ${{ runner.os }}-dockerimage-webpack-${{ github.ref }}-
          ${{ runner.os }}-dockerimage-webpack-
    - name: install node v14
      uses: actions/setup-node@v2
      with:
        node-version: 14
    - name: yarn install
      run: yarn install
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DockerHubUsername }}
        password: ${{ secrets.DockerHubPassword }}
    - name: Build webpack bundle
      run: yarn run build
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@master
    - # Temp fix, see below
      name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Build and push to Docker Hub
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        target: production
        tags: |
          neinteractiveliterature/intercode:${{ github.sha }}
        # TODO: put this back once it gets working again
        # cache-from: type=gha
        # cache-to: type=gha,mode=max
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
    -
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  docker-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
    needs:
      - graphql-codegen
      - tsc
      - jest
      - webpack
      - minitest
      - docker-build
    steps:
    - uses: actions/checkout@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DockerHubUsername }}
        password: ${{ secrets.DockerHubPassword }}
    - name: Pull built image
      run: docker pull neinteractiveliterature/intercode:${{ github.sha }}
    - name: Tag image as latest
      run: docker tag neinteractiveliterature/intercode:${{ github.sha }} neinteractiveliterature/intercode:latest
    - name: Push to Docker Hub
      run: docker push neinteractiveliterature/intercode:latest
    - name: Log into Heroku Container Registry
      env:
        HEROKU_API_TOKEN: ${{ secrets.HerokuApiToken }}
      run: echo "$HEROKU_API_TOKEN" | docker login --username=_ --password-stdin registry.heroku.com
    - name: Tag production image as "web"
      run: docker tag neinteractiveliterature/intercode:${{ github.sha }} registry.heroku.com/intercode/web
    - name: Push "web" image to Heroku Container Registry
      run: docker push registry.heroku.com/intercode/web
    - name: Build "release" image
      run: docker buildx build -t registry.heroku.com/intercode/release
        --build-arg INTERCODE_TAG=${{ github.sha }}
        --build-arg REVISION=${{ github.sha }}
        -f Dockerfile.release
        --push
        .
    - name: Build and push "shoryuken" image
      run: docker buildx build -t registry.heroku.com/intercode/shoryuken
        --build-arg INTERCODE_TAG=${{ github.sha }}
        -f Dockerfile.shoryuken
        --push
        .
