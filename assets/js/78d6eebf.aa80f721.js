"use strict";(self.webpackChunkdoc_site=self.webpackChunkdoc_site||[]).push([[26444],{11656:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>t,metadata:()=>a,toc:()=>u});var r=n(36544),l=n(54332);const t={id:"pluralize",title:"pluralize"},s=void 0,a={id:"liquid/filters/pluralize",title:"pluralize",description:"Can be used to either pluralize a singular noun, or to conditionally pluralize a noun based",source:"@site/docs/liquid/filters/pluralize.mdx",sourceDirName:"liquid/filters",slug:"/liquid/filters/pluralize",permalink:"/docs/liquid/filters/pluralize",draft:!1,unlisted:!1,editUrl:"https://github.com/neinteractiveliterature/intercode/edit/main/doc-site/docs/liquid/filters/pluralize.mdx",tags:[],version:"current",frontMatter:{id:"pluralize",title:"pluralize"},sidebar:"sidebar",previous:{title:"money",permalink:"/docs/liquid/filters/money"},next:{title:"singularize",permalink:"/docs/liquid/filters/singularize"}},d={},u=[{value:"Parameters",id:"parameters",level:3},{value:"<code>input</code> (<code>String</code>, <code>Integer</code>)",id:"input-string-integer",level:4},{value:"<code>plural</code> (<code>String</code>)",id:"plural-string",level:4},{value:"<code>singular</code> (<code>String</code>)",id:"singular-string",level:4},{value:"Returns (<code>String</code>)",id:"returns-string",level:3},{value:"Examples",id:"examples",level:3}];function o(e){const i={code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,l.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.p,{children:"Can be used to either pluralize a singular noun, or to conditionally pluralize a noun based\non a count."}),"\n",(0,r.jsx)(i.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(i.h4,{id:"input-string-integer",children:[(0,r.jsx)(i.code,{children:"input"})," (",(0,r.jsx)("code",{children:"String"}),", ",(0,r.jsx)("code",{children:"Integer"}),")"]}),"\n",(0,r.jsx)(i.p,{children:"The input to pluralize.  If it's a string, that string will\nbe unconditionally pluralized.  If it's a number, pluralize\nwill read the singular and plural parameters and decide\nbetween them depending on whether input is 1."}),"\n",(0,r.jsxs)(i.h4,{id:"plural-string",children:[(0,r.jsx)(i.code,{children:"plural"})," (",(0,r.jsx)("code",{children:"String"}),")"]}),"\n",(0,r.jsx)(i.p,{children:"Optional.  If input is a number, this will be the result if input is\nnot 1."}),"\n",(0,r.jsxs)(i.h4,{id:"singular-string",children:[(0,r.jsx)(i.code,{children:"singular"})," (",(0,r.jsx)("code",{children:"String"}),")"]}),"\n",(0,r.jsx)(i.p,{children:"Optional.  If input is a number, this will be the result if input\nis 1."}),"\n",(0,r.jsxs)(i.h3,{id:"returns-string",children:["Returns (",(0,r.jsx)("code",{children:"String"}),")"]}),"\n",(0,r.jsx)(i.p,{children:"The pluralized string or phrase"}),"\n",(0,r.jsx)(i.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-liquid",metastring:'title="Pluralizing a noun unconditionally"',children:'{{ "goose" | pluralize }} => "geese"\n'})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-liquid",metastring:'title="Pluralizing a count"',children:'You are signed up for {{ user_con_profile.signups.length | pluralize "game" "games" }}\n=> "You are signed up for 3 games"\n'})})]})}function c(e={}){const{wrapper:i}={...(0,l.M)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},54332:(e,i,n)=>{n.d(i,{I:()=>a,M:()=>s});var r=n(79020);const l={},t=r.createContext(l);function s(e){const i=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),r.createElement(t.Provider,{value:i},e.children)}}}]);