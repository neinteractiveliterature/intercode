"use strict";(self.webpackChunkdoc_site=self.webpackChunkdoc_site||[]).push([[31849],{61128:(e,n,s)=>{s.r(n),s.d(n,{Badge:()=>p,Bullet:()=>a,SpecifiedBy:()=>u,assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>o});var r=s(35091),t=s(1422);const i={id:"merge-users-input",title:"MergeUsersInput",hide_table_of_contents:!1},l=void 0,d={id:"graphql/inputs/merge-users-input",title:"MergeUsersInput",description:"Autogenerated input type of MergeUsers",source:"@site/docs/graphql/inputs/merge-users-input.mdx",sourceDirName:"graphql/inputs",slug:"/graphql/inputs/merge-users-input",permalink:"/docs/graphql/inputs/merge-users-input",draft:!1,unlisted:!1,editUrl:"https://github.com/neinteractiveliterature/intercode/edit/main/doc-site/docs/graphql/inputs/merge-users-input.mdx",tags:[],version:"current",frontMatter:{id:"merge-users-input",title:"MergeUsersInput",hide_table_of_contents:!1},sidebar:"sidebar",previous:{title:"MarkOrderPaidInput",permalink:"/docs/graphql/inputs/mark-order-paid-input"},next:{title:"MoneyInput",permalink:"/docs/graphql/inputs/money-input"}},c={},o=[{value:"Fields",id:"fields",level:3},{value:'<code>MergeUsersInput.<b>clientMutationId</b></code><Bullet></Bullet><code>String</code> <Badge class="secondary"></Badge>',id:"mergeusersinputclientmutationidstring-",level:4},{value:'<code>MergeUsersInput.<b>userIds</b></code><Bullet></Bullet><code>[ID!]</code> <Badge class="secondary"></Badge> <Badge class="secondary"></Badge>',id:"mergeusersinputuseridsid--",level:4},{value:'<code>MergeUsersInput.<b>winningUserConProfiles</b></code><Bullet></Bullet><code>[WinningUserConProfileInput!]!</code> <Badge class="secondary"></Badge> <Badge class="secondary"></Badge>',id:"mergeusersinputwinninguserconprofileswinninguserconprofileinput--",level:4},{value:'<code>MergeUsersInput.<b>winningUserId</b></code><Bullet></Bullet><code>ID</code> <Badge class="secondary"></Badge>',id:"mergeusersinputwinninguseridid-",level:4},{value:"Member of",id:"member-of",level:3}],a=()=>{const e={span:"span",...(0,t.R)()};return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(e.span,{style:{fontWeight:"normal",fontSize:".5em",color:"var(--ifm-color-secondary-darkest)"},children:"\xa0\u25cf\xa0"})})},u=e=>{const n={a:"a",...(0,t.R)()};return(0,r.jsxs)(r.Fragment,{children:["Specification",(0,r.jsx)(n.a,{className:"link",style:{fontSize:"1.5em",paddingLeft:"4px"},target:"_blank",href:e.url,title:"Specified by "+e.url,children:"\u2398"})]})},p=e=>{const n={span:"span",...(0,t.R)()};return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(n.span,{class:"badge badge--"+e.class,children:e.text})})};function g(e){const n={a:"a",blockquote:"blockquote",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Autogenerated input type of MergeUsers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"input MergeUsersInput {\n  clientMutationId: String\n  userIds: [ID!]\n  winningUserConProfiles: [WinningUserConProfileInput!]!\n  winningUserId: ID\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"fields",children:"Fields"}),"\n",(0,r.jsxs)(n.h4,{id:"mergeusersinputclientmutationidstring-",children:[(0,r.jsx)(n.a,{href:"#",children:(0,r.jsxs)("code",{style:{fontWeight:"normal"},children:["MergeUsersInput.",(0,r.jsx)("b",{children:"clientMutationId"})]})}),(0,r.jsx)(a,{}),(0,r.jsx)(n.a,{href:"/docs/graphql/scalars/string",children:(0,r.jsx)(n.code,{children:"String"})})," ",(0,r.jsx)(p,{class:"secondary",text:"scalar"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"A unique identifier for the client performing the mutation."}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"mergeusersinputuseridsid--",children:[(0,r.jsx)(n.a,{href:"#",children:(0,r.jsxs)("code",{style:{fontWeight:"normal"},children:["MergeUsersInput.",(0,r.jsx)("b",{children:"userIds"})]})}),(0,r.jsx)(a,{}),(0,r.jsx)(n.a,{href:"/docs/graphql/scalars/id",children:(0,r.jsx)(n.code,{children:"[ID!]"})})," ",(0,r.jsx)(p,{class:"secondary",text:"list"})," ",(0,r.jsx)(p,{class:"secondary",text:"scalar"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"The user IDs to merge."}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"mergeusersinputwinninguserconprofileswinninguserconprofileinput--",children:[(0,r.jsx)(n.a,{href:"#",children:(0,r.jsxs)("code",{style:{fontWeight:"normal"},children:["MergeUsersInput.",(0,r.jsx)("b",{children:"winningUserConProfiles"})]})}),(0,r.jsx)(a,{}),(0,r.jsx)(n.a,{href:"/docs/graphql/inputs/winning-user-con-profile-input",children:(0,r.jsx)(n.code,{children:"[WinningUserConProfileInput!]!"})})," ",(0,r.jsx)(p,{class:"secondary",text:"non-null"})," ",(0,r.jsx)(p,{class:"secondary",text:"input"})]}),"\n",(0,r.jsx)(n.blockquote,{children:"\n"}),"\n",(0,r.jsxs)(n.h4,{id:"mergeusersinputwinninguseridid-",children:[(0,r.jsx)(n.a,{href:"#",children:(0,r.jsxs)("code",{style:{fontWeight:"normal"},children:["MergeUsersInput.",(0,r.jsx)("b",{children:"winningUserId"})]})}),(0,r.jsx)(a,{}),(0,r.jsx)(n.a,{href:"/docs/graphql/scalars/id",children:(0,r.jsx)(n.code,{children:"ID"})})," ",(0,r.jsx)(p,{class:"secondary",text:"scalar"})]}),"\n",(0,r.jsx)(n.blockquote,{children:"\n"}),"\n",(0,r.jsx)(n.h3,{id:"member-of",children:"Member of"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/graphql/mutations/merge-users",children:(0,r.jsx)(n.code,{children:"mergeUsers"})}),"  ",(0,r.jsx)(p,{class:"secondary",text:"mutation"})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},1422:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var r=s(7731);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);