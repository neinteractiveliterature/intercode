<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Intercode Blog</title>
        <link>https://intercode.interactiveliterature.org/blog</link>
        <description>Intercode Blog</description>
        <lastBuildDate>Thu, 11 May 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[How Intercode builds and loads JavaScript]]></title>
            <link>https://intercode.interactiveliterature.org/blog/2023/05/11/js-loading-strategy</link>
            <guid>https://intercode.interactiveliterature.org/blog/2023/05/11/js-loading-strategy</guid>
            <pubDate>Thu, 11 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Intercode is an open source Ruby on Rails application with a (mostly) single-page app frontend. Virtually all "pages" in]]></description>
            <content:encoded><![CDATA[<p>Intercode is an open source Ruby on Rails application with a (mostly) single-page app frontend. Virtually all "pages" in
the web application are resolved and rendered on the frontend using <a href="https://reactrouter.com/" target="_blank" rel="noopener noreferrer">react-router</a>. These
pages then load the data they need using Intercode's GraphQL API, which is implemented on the Rails server side using
<a href="https://graphql-ruby.org/" target="_blank" rel="noopener noreferrer">graphql-ruby</a>.</p>
<p>Intercode doesn't follow the recommended strategy for JavaScript loading in Rails applications. This blog post is an
attempt to explain why, and what we do instead.</p>
<h2 class="anchor anchorWithStickyNavbar_JRlp" id="rails-and-javascript">Rails and JavaScript<a href="https://intercode.interactiveliterature.org/blog/2023/05/11/js-loading-strategy#rails-and-javascript" class="hash-link" aria-label="Direct link to Rails and JavaScript" title="Direct link to Rails and JavaScript">​</a></h2>
<p>JavaScript in Rails applications has a long and winding history. This isn't a comprehensive timeline, but a basic
outline of how things evolved follows:</p>
<ul>
<li>2005: <a href="https://rubyonrails.org/2005/12/13/rails-1-0-party-like-its-one-oh-oh" target="_blank" rel="noopener noreferrer">The first stable Rails release</a>
came bundled with <a href="http://prototypejs.org/" target="_blank" rel="noopener noreferrer">Prototype.js</a> and <a href="http://script.aculo.us/" target="_blank" rel="noopener noreferrer">Scriptaculous</a>.</li>
<li>2006: <a href="https://rubyonrails.org/2006/3/28/rails-1-1-rjs-active-record-respond_to-integration-tests-and-500-other-things" target="_blank" rel="noopener noreferrer">Rails 1.1</a>
added a feature called "RJS" which allowed Ruby developers to avoid writing JavaScript code for some common
operations. Instead, developers could write Ruby code which generated JavaScript, which would be sent to the browser
and executed on the fly.</li>
<li>2011: <a href="https://rubyonrails.org/2011/5/22/rails-3-1-release-candidate" target="_blank" rel="noopener noreferrer">Rails 3.1</a> introduced the asset pipeline. Based
on a library called Sprockets, the asset pipeline allows Rails applications to preprocess frontend assets such as
JavaScript, CSS, and images. This made it much simpler for Rails applications to use languages that compile to
JavaScript, and Rails encouraged this by recommending <a href="https://coffeescript.org/" target="_blank" rel="noopener noreferrer">CoffeeScript</a> as a default.</li>
<li>2013: <a href="https://rubyonrails.org/2013/6/25/Rails-4-0-final" target="_blank" rel="noopener noreferrer">Rails 4.0</a> introduced new caching features to speed up
server-side rendering and added <a href="https://github.com/turbolinks/turbolinks-classic" target="_blank" rel="noopener noreferrer">Turbolinks</a> as a default for new
applications. The Rails 4.0 release notes explicitly discourage developers from writing single-page apps, instead
recommending these new features as an alternative.</li>
<li>2017: <a href="https://rubyonrails.org/2017/4/27/Rails-5-1-final" target="_blank" rel="noopener noreferrer">Rails 5.1</a> is released, with the headline "Loving
JavaScript." Along with this release comes <a href="https://github.com/rails/webpacker" target="_blank" rel="noopener noreferrer">Webpacker</a>, a library for driving
Webpack from the Rails server and integrating Webpack with the asset pipeline.</li>
<li>2021: In advance of the release of Rails 7, Rails founder David Heinemeier Hansson announces
<a href="https://world.hey.com/dhh/rails-7-will-have-three-great-answers-to-javascript-in-2021-8d68191b" target="_blank" rel="noopener noreferrer">"three great answers to JavaScript"</a>.
This announcement deprecates Webpacker and encourages developers to try using <a href="https://hotwired.dev/" target="_blank" rel="noopener noreferrer">Hotwire</a>, a
framework that includes a revamped version of Turbolinks and does most rendering on the server side. It also
introduces <a href="https://github.com/rails/jsbundling-rails" target="_blank" rel="noopener noreferrer">jsbundling-rails</a> as a migration path for Webpacker users,
albeit one that loses some functionality, such as the ability to use webpack-dev-server.</li>
</ul>
<p>One consistent theme running throughout this history is that <strong>Rails has tried to make JavaScript as optional as possible</strong>.
This makes sense from a perspective of onboarding new developers: learning Ruby, HTML, and (potentially) CSS is enough
without having to also learn JavaScript.</p>
<p>On the other hand, for Rails developers who have made the choice to embrace a frontend framework such as React, Vue, or
Ember.js, this can make Rails upgrades difficult, particularly in recent years with the introduction and then
deprecation of Webpacker. There are even official forks such as <a href="https://github.com/shakacode/shakapacker" target="_blank" rel="noopener noreferrer">Shakapacker</a>
which aim to provide a smooth path forward for people who built apps on top of Webpacker.</p>
<h2 class="anchor anchorWithStickyNavbar_JRlp" id="going-a-different-way">Going a different way<a href="https://intercode.interactiveliterature.org/blog/2023/05/11/js-loading-strategy#going-a-different-way" class="hash-link" aria-label="Direct link to Going a different way" title="Direct link to Going a different way">​</a></h2>
<p>For me, Rails 7 was the culmination of what I saw as a pattern of decades of efforts by the Rails core team to steer
developers away from writing JavaScript frontends for API-only Rails applications. I tried out both jsbundling-rails
and the import maps path outlined in the "three great answers" blog post, and didn't find either of them to be great
developer experiences in Intercode. (The blog post pretty much says this is the case for import maps in fully
React-based apps, and for me, the lack of webpack-dev-server support in jsbundling-rails made it significantly slower
and more resource-intensive to develop with.)</p>
<p>What Intercode ideally needed was a solution that:</p>
<ul>
<li>Decouples Rails from the JavaScript frontend as much as possible</li>
<li>Supports a single-repo build and deploy strategy, so that the backend and frontend can be deployed in tandem</li>
<li>Keeps the local development experience responsive and easy to work with</li>
<li>Works well in both a CDN-backed setup as well as a single-server, non-CDN setup (because NEIL's installation of
Intercode uses the Amazon CloudFront CDN, but Consequences' uses a single server)</li>
<li>Allows browser caching to work for compiled JavaScript and CSS bundles</li>
</ul>
<p>Decoupling Rails from the JavaScript frontend would allow us to continue keeping Rails up to date without having to
rethink our JavaScript build strategy every time the Rails core team changed its mind about the best way to integrate
Rails with JavaScript. This was important for us, because Rails updates often contain urgent security fixes and we want
to be able to take those as quickly as possible.</p>
<h2 class="anchor anchorWithStickyNavbar_JRlp" id="without-further-ado">Without further ado<a href="https://intercode.interactiveliterature.org/blog/2023/05/11/js-loading-strategy#without-further-ado" class="hash-link" aria-label="Direct link to Without further ado" title="Direct link to Without further ado">​</a></h2>
<p>Here's how we do it in Intercode.</p>
<p>Intercode uses plain old off-the-shelf Webpack to build its JavaScript bundles. We use Webpack's built-in ability to
add fingerprint hashes to the end of built asset filenames for easy caching, just like what the Rails asset pipeline
does by default.</p>
<p>The only exception to this fingerprint hashing is a small set of JavaScript entry points. Here's a slightly abbreviated
version of the section of our webpack.config.js that sets this up:</p>
<div class="language-js codeBlockContainer_X0pr theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockContent_YLKz"><pre tabindex="0" class="prism-code language-js codeBlock_NQmt thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_LRf0"><span class="token-line" style="color:#403f53"><span class="token literal-property property" style="color:rgb(12, 150, 155)">entry</span><span class="token operator" style="color:rgb(12, 150, 155)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token literal-property property" style="color:rgb(12, 150, 155)">application</span><span class="token operator" style="color:rgb(12, 150, 155)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(72, 118, 214)">'./app/javascript/packs/applicationEntry.ts'</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token string-property property" style="color:rgb(12, 150, 155)">'application-styles'</span><span class="token operator" style="color:rgb(12, 150, 155)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(72, 118, 214)">'./app/javascript/packs/applicationStyles.ts'</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token punctuation" style="color:rgb(153, 76, 195)">}</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token literal-property property" style="color:rgb(12, 150, 155)">output</span><span class="token operator" style="color:rgb(12, 150, 155)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token literal-property property" style="color:rgb(12, 150, 155)">filename</span><span class="token operator" style="color:rgb(12, 150, 155)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(72, 118, 214)">'[name].js'</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token literal-property property" style="color:rgb(12, 150, 155)">chunkFilename</span><span class="token operator" style="color:rgb(12, 150, 155)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(72, 118, 214)">'[name]-[chunkhash].chunk.js'</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token punctuation" style="color:rgb(153, 76, 195)">}</span><br></span></code></pre><div class="buttonGroup_aYCK"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Q1J4" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_pFi4"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_TPW_"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Because of this configuration, all built JavaScript files will have a chunk hash in the filename, except the
<code>application.js</code> and <code>application-styles.js</code> files. Because of this, Rails doesn't need any kind of integration with
Webpack - we can simply hard-code a JavaScript path in our Rails templates. Here's an excerpt from our global template:</p>
<div class="language-erb codeBlockContainer_X0pr theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockContent_YLKz"><pre tabindex="0" class="prism-code language-erb codeBlock_NQmt thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_LRf0"><span class="token-line" style="color:#403f53"><span class="token plain">&lt;% if ENV['ASSETS_HOST'].present? -%&gt;</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  &lt;script type="application/javascript"&gt;</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    window.intercodeAssetsHost = &lt;%=raw ENV['ASSETS_HOST'].to_json %&gt;;</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  &lt;/script&gt;</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">&lt;% end -%&gt;</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">&lt;%= javascript_include_tag url_with_possible_host('/packs/application.js', ENV['ASSETS_HOST']), defer: true, type: 'module' %&gt;</span><br></span></code></pre><div class="buttonGroup_aYCK"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Q1J4" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_pFi4"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_TPW_"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There are a bunch of shenanigans going on here with the asset host, but let's simplify this and assume that we're using
a simple, single-server Intercode setup. In this setup, the <code>ASSETS_HOST</code> environment variable would not be set.
Effectively, this snippet of template code would behave like this code:</p>
<div class="language-erb codeBlockContainer_X0pr theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockContent_YLKz"><pre tabindex="0" class="prism-code language-erb codeBlock_NQmt thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_LRf0"><span class="token-line" style="color:#403f53"><span class="token plain">&lt;%= javascript_include_tag '/packs/application.js', defer: true, type: 'module' %&gt;</span><br></span></code></pre><div class="buttonGroup_aYCK"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Q1J4" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_pFi4"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_TPW_"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>No fingerprint needed - all we need to do is have Webpack compile into <code>/public/packs/application.js</code> in the root of the
Rails application, and Rails can hardcode the path to it and serve the files statically.</p>
<p>The actual contents of these entry point files are relatively tiny. Here's the effective version of
<code>applicationEntry.ts</code>, with all the code it imports shown inline instead:</p>
<div class="language-ts codeBlockContainer_X0pr theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockContent_YLKz"><pre tabindex="0" class="prism-code language-ts codeBlock_NQmt thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_LRf0"><span class="token-line" style="color:#403f53"><span class="token keyword" style="color:rgb(12, 150, 155)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token plain">window</span><span class="token punctuation" style="color:rgb(153, 76, 195)">.</span><span class="token plain">intercodeAssetsHost</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  __webpack_public_path__ </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(72, 118, 214)">`</span><span class="token template-string string" style="color:rgb(72, 118, 214)">//</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(153, 76, 195)">${</span><span class="token template-string interpolation">window</span><span class="token template-string interpolation punctuation" style="color:rgb(153, 76, 195)">.</span><span class="token template-string interpolation">intercodeAssetsHost</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(153, 76, 195)">}</span><span class="token template-string string" style="color:rgb(72, 118, 214)">/packs/</span><span class="token template-string template-punctuation string" style="color:rgb(72, 118, 214)">`</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token punctuation" style="color:rgb(153, 76, 195)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token keyword" style="color:rgb(12, 150, 155)">import</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token comment" style="color:rgb(152, 159, 177);font-style:italic">/* webpackChunkName: 'applicationStylesheet' */</span><span class="token plain"> </span><span class="token string" style="color:rgb(72, 118, 214)">'../styles/application.scss'</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token keyword" style="color:rgb(12, 150, 155)">import</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token comment" style="color:rgb(152, 159, 177);font-style:italic">/* webpackChunkName: 'bootstrap-js' */</span><span class="token plain"> </span><span class="token string" style="color:rgb(72, 118, 214)">'bootstrap'</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token keyword" style="color:rgb(12, 150, 155)">import</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token comment" style="color:rgb(152, 159, 177);font-style:italic">/* webpackChunkName: "application-main" */</span><span class="token plain"> </span><span class="token string" style="color:rgb(72, 118, 214)">'./application'</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><br></span></code></pre><div class="buttonGroup_aYCK"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Q1J4" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_pFi4"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_TPW_"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The heavy lifting here is done by the <code>import</code> function, which is specified in the
<a href="https://tc39.es/proposal-dynamic-import/" target="_blank" rel="noopener noreferrer">ECMAScript Dynamic Import proposal</a> and implemented by Webpack as
<a href="https://webpack.js.org/guides/code-splitting/#dynamic-imports" target="_blank" rel="noopener noreferrer">part of its code splitting features</a>. Behind the
scenes, Webpack adds a small function that allows it to dynamically load other modules on demand, as well as a data
structure that contains the fingerprint hashes of all modules that resulted from this build. This effectively makes
the application entry point into a kind of manifest file that has all the relevant information about the contents of
this Webpack build.</p>
<p>The net effect of this is:</p>
<ol>
<li>Rails renders a hardcoded <code>&lt;script&gt;</code> tag into HTML templates that points at a known, non-fingerprinted location.</li>
<li>The user's web browser loads the entry point JS file from that location.</li>
<li>When the entry point JS executes, its dynamic import statements point it at the fingerprinted URLs for the actual
asset bundles for the main application code.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_JRlp" id="caching-and-not-caching">Caching, and not caching<a href="https://intercode.interactiveliterature.org/blog/2023/05/11/js-loading-strategy#caching-and-not-caching" class="hash-link" aria-label="Direct link to Caching, and not caching" title="Direct link to Caching, and not caching">​</a></h3>
<p>For this setup to perform well, it's very important that two things are true:</p>
<ol>
<li>Asset URLs with fingerprints in them get cached</li>
<li>Asset URLs without fingerprints in them don't get cached</li>
</ol>
<p>The reason for caching URLs with fingerprints in them is straightforward: we don't want the user to be re-downloading
large chunks of JavaScript and CSS on every page load. The reason for <em>not</em> caching URLs without fingerprints in them
is perhaps less obvious, but it's critical for the site to function correctly: if there has been a new deploy of
frontend code, we want users to get the new version the next time they do a page load.</p>
<p>Because the entry point file is effectively a manifest of all built asset hashes, loading the entry point is all that's
needed to let the browser do the right thing for loading the rest of the build. If the fingerprints haven't changed,
and there's already a copy of those files in its local cache, the browser doesn't need to do anything - it can use the
copy it's already got. If they have changed, the URLs they're loaded from have changed and therefore the browser won't
use a cached copy.</p>
<p>The tradeoff here is that the entry point file has to be reloaded on every page load. For that reason, we try to keep
it as small as possible. The <a href="https://assets.neilhosting.net/packs/application.js" target="_blank" rel="noopener noreferrer">current production version</a> as of
this writing is a little over 9KB, and if the browser supports gzip compression (which
<a href="https://caniuse.com/sr_content-encoding-gzip" target="_blank" rel="noopener noreferrer">effectively all browsers do</a>) it will only end up transferring around
5KB.</p>
<p>To make sure the entry point files never get cached, we use a small bit of custom Rack middleware in the Rails app:</p>
<div class="language-ruby codeBlockContainer_X0pr theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockContent_YLKz"><pre tabindex="0" class="prism-code language-ruby codeBlock_NQmt thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_LRf0"><span class="token-line" style="color:#403f53"><span class="token plain"># adapted from https://stackoverflow.com/a/52848885</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">module Intercode</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  class DisableCachingForSpecificAssets</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    attr_reader :app, :asset_paths</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    def initialize(app, asset_paths)</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">      @app = app</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">      @asset_paths = Set.new(asset_paths)</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    def call(env)</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">      # Let the next middleware classes &amp; app do their thing first…</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">      status, headers, response = app.call(env)</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">      # …and modify the response if a cache-disabled asset was fetched.</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">      if asset_paths.include?(env['REQUEST_PATH'])</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">        headers['Cache-Control'] = 'no-cache'</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">        headers.except!('Expires')</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">      end</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">      [status, headers, response]</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  end</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup_aYCK"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Q1J4" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_pFi4"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_TPW_"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This middleware is loaded in <code>config/environments/production.rb</code>:</p>
<div class="language-ruby codeBlockContainer_X0pr theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockContent_YLKz"><pre tabindex="0" class="prism-code language-ruby codeBlock_NQmt thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_LRf0"><span class="token-line" style="color:#403f53"><span class="token plain">if ENV["RAILS_SERVE_STATIC_FILES"].present?</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  config.middleware.insert_before ActionDispatch::Static,</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">                                  Intercode::DisableCachingForSpecificAssets,</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">                                  JSON.parse(File.read(File.expand_path("config/nocache-files.json", Rails.root)))</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup_aYCK"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Q1J4" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_pFi4"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_TPW_"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This code reads a list of paths to disable caching on from <code>config/nocache-files.json</code>, which contains this:</p>
<div class="language-json codeBlockContainer_X0pr theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockContent_YLKz"><pre tabindex="0" class="prism-code language-json codeBlock_NQmt thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_LRf0"><span class="token-line" style="color:#403f53"><span class="token punctuation" style="color:rgb(153, 76, 195)">[</span><span class="token string" style="color:rgb(72, 118, 214)">"/packs/application.js"</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(72, 118, 214)">"/packs/application-styles.js"</span><span class="token punctuation" style="color:rgb(153, 76, 195)">]</span><br></span></code></pre><div class="buttonGroup_aYCK"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Q1J4" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_pFi4"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_TPW_"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>(The reason we split out the list of entry points into a separate JSON file is to support a workflow used by the
Consequences team to support the <a href="https://www.consequences.org.uk/" target="_blank" rel="noopener noreferrer">Consequences larp conventions</a> as well as other
UK-based larp events. This team runs a separate nginx container to serve assets. That workflow needs to dynamically
generate an nginx config file that says which paths to send the <code>Cache-Control: no-cache</code> header on. We want to make
sure that the Rails app and the nginx container stay in sync with one another, so we use the JSON file as a single
source of truth for both of them.)</p>
<h3 class="anchor anchorWithStickyNavbar_JRlp" id="client-auto-reload">Client auto-reload<a href="https://intercode.interactiveliterature.org/blog/2023/05/11/js-loading-strategy#client-auto-reload" class="hash-link" aria-label="Direct link to Client auto-reload" title="Direct link to Client auto-reload">​</a></h3>
<p>This setup also enables one other cool feature: it's possible for the frontend code in the browser to check whether or
not it's running out-of-date JavaScript. We can do this by making a HEAD request to the path of the application.js
entry point:</p>
<div class="language-js codeBlockContainer_X0pr theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockContent_YLKz"><pre tabindex="0" class="prism-code language-js codeBlock_NQmt thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_LRf0"><span class="token-line" style="color:#403f53"><span class="token keyword" style="color:rgb(12, 150, 155)">const</span><span class="token plain"> response </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(153, 76, 195);font-style:italic">fetch</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token template-string template-punctuation string" style="color:rgb(72, 118, 214)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(153, 76, 195)">${</span><span class="token template-string interpolation">__webpack_public_path__ </span><span class="token template-string interpolation operator" style="color:rgb(12, 150, 155)">??</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation string" style="color:rgb(72, 118, 214)">'/packs/'</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(153, 76, 195)">}</span><span class="token template-string string" style="color:rgb(72, 118, 214)">application.js</span><span class="token template-string template-punctuation string" style="color:rgb(72, 118, 214)">`</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token literal-property property" style="color:rgb(12, 150, 155)">method</span><span class="token operator" style="color:rgb(12, 150, 155)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(72, 118, 214)">'HEAD'</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token literal-property property" style="color:rgb(12, 150, 155)">cache</span><span class="token operator" style="color:rgb(12, 150, 155)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(72, 118, 214)">'no-store'</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token punctuation" style="color:rgb(153, 76, 195)">}</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><br></span></code></pre><div class="buttonGroup_aYCK"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_Q1J4" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_pFi4"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_TPW_"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can then use this response to check whether certain headers are the same as the last time we did this request. In
particular, Intercode checks the <code>Last-Modified</code>, <code>ETag</code>, and <code>Content-Length</code> headers of the entry point. If any of
those have changed, it considers the code it's running to be outdated. The full implementation of this is a little too
long to paste in here, but <a href="https://github.com/neinteractiveliterature/intercode/blob/07df0692f1b9473510db5a575268ffa74f75d92c/app/javascript/checkAppEntrypointHeadersMatch.ts" target="_blank" rel="noopener noreferrer">here's a link to the full implementation</a>.</p>
<p>There are a few situations where Intercode checks whether or not it's running outdated code, but the most common one
is during page transitions. We've set up a hook on the React Router location, and whenever it changes, we run this
check. If the code is outdated, we do a <code>window.location.reload()</code>.</p>
<p>Forcing a page reload can be a dangerous operation. If there's unsaved data in memory, reloading the page clears it
out. To ensure this is safe in Intercode, we only change the URL location <em>after</em> data has been successfully saved to
the server. For example, when creating a new staff position, the flow goes like this:</p>
<ol>
<li>Go to <code>/staff_positions/new</code>, which renders a blank form for the user to fill out.</li>
<li>The user fills out the form and presses "Submit".</li>
<li>The frontend code does a GraphQL request using the <code>createStaffPosition</code> mutation.</li>
<li>Only after it returns a successful response, transition to the <code>/staff_positions</code> page.</li>
<li>Because the location is changed, check whether we're running outdated code. If so, reload the page.</li>
</ol>
<p>Reloading the page in the last step is safe because we only change locations after the GraphQL request responds
successfully.</p>
<h2 class="anchor anchorWithStickyNavbar_JRlp" id="conclusion">Conclusion<a href="https://intercode.interactiveliterature.org/blog/2023/05/11/js-loading-strategy#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>The approach of using a minimal, uncached, stub entry point with a predictable URL works well for Intercode. With this
strategy, we're able to decouple the backend server from the frontend application, ensuring that it's possible for us to
upgrade Rails without the possibility of breaking our JavaScript stack.</p>
<p>This approach is probably not right for every web application, or even every Rails application, but I do think it's a
useful approach for Rails apps where:</p>
<ul>
<li>The frontend code is largely responsible for rendering HTML, and talks to the server over some kind of API (REST,
GraphQL, etc.)</li>
<li>The frontend code is built using a bundler, such as Webpack, which supports dynamic imports</li>
</ul>]]></content:encoded>
            <category>tech</category>
        </item>
        <item>
            <title><![CDATA[Database Export Security Issue Disclosure]]></title>
            <link>https://intercode.interactiveliterature.org/blog/2022/12/02/database-export-security-disclosure</link>
            <guid>https://intercode.interactiveliterature.org/blog/2022/12/02/database-export-security-disclosure</guid>
            <pubDate>Fri, 02 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Hi larp community! A thing happened that we should tell you about. You're receiving this because you've logged into at least one convention website running in NEIL Hosting (Intercon, Be-Con, Festival, Bubble, etc).]]></description>
            <content:encoded><![CDATA[<p>Hi larp community! A thing happened that we should tell you about. You're receiving this because you've logged into at least one convention website running in NEIL Hosting (Intercon, Be-Con, Festival, Bubble, etc).</p>
<p>While reviewing the code in the Intercode open source project, we discovered a backup of the Intercode production database. This backup was publicly available for about 6 weeks between September 18 and November 3, 2022.</p>
<p>We do not store payment card data in this database. In addition, we use industry-standard password hashing to protect passwords. <strong>Nevertheless, we recommend that you change your password as a precaution. To change your password, please visit: <a href="https://www.neilhosting.net/users/edit" target="_blank" rel="noopener noreferrer">https://www.neilhosting.net/users/edit</a></strong></p>
<p>We do not have any evidence that this data was accessed, and we have taken steps to remove it from the Internet. However, we also have no way to prove that the data was not accessed.</p>
<h2 class="anchor anchorWithStickyNavbar_JRlp" id="what-data-was-publicly-accessible">What data was publicly accessible?<a href="https://intercode.interactiveliterature.org/blog/2022/12/02/database-export-security-disclosure#what-data-was-publicly-accessible" class="hash-link" aria-label="Direct link to What data was publicly accessible?" title="Direct link to What data was publicly accessible?">​</a></h2>
<ul>
<li>Information in User Profiles for all conventions hosted on this instance, which may include names, addresses, phone numbers, email addresses, birth dates (if provided), etc:<!-- -->
<ul>
<li>These conventions include but are not limited to: Intercon, Festival of the LARPs, Bubble, SLAW, Summer Larpin', Be-Con, NELCO, Winter Boffer Con, Wintercon, and others. Refer to <a href="https://www.neilhosting.net/pages/all-conventions" target="_blank" rel="noopener noreferrer">https://www.neilhosting.net/pages/all-conventions</a> for a more complete list.</li>
</ul>
</li>
<li>Encrypted passwords for all user accounts. Passwords are hashed and salted using the industry-standard bcrypt algorithm.</li>
<li>Event proposals, signups, dropped events, individual event ratings (starred/hidden events), and all other data used in the signup system for Intercode-hosted conventions.</li>
<li>Historical data from past conventions, including previous addresses, names, phone numbers, and anything else attendees might have entered into profiles and not updated on that convention site.</li>
<li>Lists of user activity alerts set up by admins of current and prior conventions.</li>
<li>Sales records for tickets and merchandise at current and past conventions.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_JRlp" id="how-did-this-happen">How did this happen?<a href="https://intercode.interactiveliterature.org/blog/2022/12/02/database-export-security-disclosure#how-did-this-happen" class="hash-link" aria-label="Direct link to How did this happen?" title="Direct link to How did this happen?">​</a></h2>
<p>Prior to resetting the Intercon U signups and schedule, Nat took a manual export of the full database for safety. This is outside our standard backup procedure, which uses Amazon's automated database snapshot feature and stores backups in a separate secure environment.</p>
<p>The manual export file stayed on Nat's computer while he developed the COVID mask protocol features for Intercode that we're currently using at Intercon U. When checking the new code into the repository, Nat accidentally included the export.</p>
<p>The day before Intercon U signups opened for the first round, while reviewing unrelated code in preparation for the signups opening, Nat noticed the file on Github and immediately began taking steps to remove it.</p>
<h2 class="anchor anchorWithStickyNavbar_JRlp" id="what-are-we-doing-about-this">What are we doing about this?<a href="https://intercode.interactiveliterature.org/blog/2022/12/02/database-export-security-disclosure#what-are-we-doing-about-this" class="hash-link" aria-label="Direct link to What are we doing about this?" title="Direct link to What are we doing about this?">​</a></h2>
<p>We have purged all known copies of this file from the public Internet. We've also reached out to the Consequences web team, who we believe accidentally received this file as part of their regular Intercode releases, and asked them to purge it from their systems. We also searched some of the places on the Internet where stolen data often appears to see if the Intercode export may have ended up there, and weren't able to find it.</p>
<p>We've also added some additional protections to our code repository and data export process to make it much less likely that a similar incident could occur in the future.</p>
<p>We held a post-mortem meeting to discuss this incident and document it. The meeting notes are available at: <a href="https://docs.google.com/document/d/1hcVCF9wzqpTevZPlImRUjhTONp4hFqgjcQhWER4Ao7M/edit?usp=sharing" target="_blank" rel="noopener noreferrer">https://docs.google.com/document/d/1hcVCF9wzqpTevZPlImRUjhTONp4hFqgjcQhWER4Ao7M/edit?usp=sharing</a></p>
<p>We're also sending this email to all Intercode users to let them know. <strong>Again, we recommend that you change your password using the link above.</strong></p>
<p>We recognize the potential severity of this data exposure. We'd like to apologize deeply. We understand the importance of data security, and we should not have allowed this to happen. Transparency is important to us, and if you have any questions about this, we'd be more than happy to chat with you.</p>
<p>Nat Budin (he/him)<br>
Dave Kapell (he/him)<br>
Jae Hartwin (crow/crows)<br>
John Cooke (he/him)</p>]]></content:encoded>
            <category>security</category>
        </item>
        <item>
            <title><![CDATA[GraphQL Cross-Domain Security Issue Disclosure]]></title>
            <link>https://intercode.interactiveliterature.org/blog/2022/01/18/graphql-cross-domain-security-issue-disclosure</link>
            <guid>https://intercode.interactiveliterature.org/blog/2022/01/18/graphql-cross-domain-security-issue-disclosure</guid>
            <pubDate>Tue, 18 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Hey all. This thing happened we should tell you about.]]></description>
            <content:encoded><![CDATA[<p>Hey all. This thing happened we should tell you about.</p>
<p>While performing platform upgrades, we found a bug in Intercode, the website code used by conventions such as Intercon. It has since been fixed.</p>
<p>This bug created an exploit where people with leadership access to one Intercode convention could use certain permissions on any convention. As a reminder, not even admins have access to your passwords or financial information.</p>
<p>Due to the technical complexity of accessing the exploit and the small number of people who had the permissions required to take advantage of this, we don’t think it was used, but can’t prove it.</p>
<h2 class="anchor anchorWithStickyNavbar_JRlp" id="what-happened">What Happened?<a href="https://intercode.interactiveliterature.org/blog/2022/01/18/graphql-cross-domain-security-issue-disclosure#what-happened" class="hash-link" aria-label="Direct link to What Happened?" title="Direct link to What Happened?">​</a></h2>
<p>It’s technically possible con leadership from one convention looked at or modified information for conventions they should not have had access to. We don’t think anyone did, and it’s since been fixed, but here’s the low down.</p>
<p>There’s a function called “Become user” which certain people on the convention team have permissions for. Just like it sounds, it lets people see the convention website as if they were logged in as the selected user. It’s used for things like running the convention, debugging, and accessing the website on behalf of a user at their request. It does not allow access to anyone’s passwords or payment information.</p>
<p>This permission is fairly restricted and convention specific. That being said, if you had Become user permissions on one convention using Intercode, it turns out there was a way to then Become user on any Intercode convention. It would involve coding and would not be easy, but it was possible. For example, someone with admin access to Intercon S could have accessed admin functions on Be-Con 2019, including viewing and modifying event and attendee data.</p>
<h2 class="anchor anchorWithStickyNavbar_JRlp" id="what-are-we-doing-about-this">What Are We Doing About This?<a href="https://intercode.interactiveliterature.org/blog/2022/01/18/graphql-cross-domain-security-issue-disclosure#what-are-we-doing-about-this" class="hash-link" aria-label="Direct link to What Are We Doing About This?" title="Direct link to What Are We Doing About This?">​</a></h2>
<p>The bug has been fixed and the exploit is gone. We’ve also reviewed the list of people who have Become user permissions on any Intercode site. Considering the difficulty of finding the exploit, the technical expertise required to use it, and the limited set of people who have the necessary permissions, we think it’s really unlikely anyone did so. That being said, we can’t prove a negative.</p>
<p>A post-mortem was held to document the exploit, which you can find at: <a href="https://docs.google.com/document/d/1Ov8jFIpExWn-elUBXtRd22BwoIQGSbWMFio_iTL9IRM/edit?usp=sharing" target="_blank" rel="noopener noreferrer">https://docs.google.com/document/d/1Ov8jFIpExWn-elUBXtRd22BwoIQGSbWMFio_iTL9IRM/edit?usp=sharing</a>. It includes timelines and technical details for the interested.</p>
<p>And of course, we’re now telling you about it. We take the safety and security of our community very seriously, which means owning up to our mistakes. We apologize this happened at all, and we're even more sorry it took us so long to notice it.</p>
<p>Thanks for your faith in us.</p>
<p>The Intercode Team<br>
Nat Budin (he/him)<br>
Dave Kapell (he/him)<br>
Jae Hartwin (they/them)<br>
Marleigh Norton (she/her)</p>]]></content:encoded>
            <category>security</category>
        </item>
        <item>
            <title><![CDATA[Email forwarding]]></title>
            <link>https://intercode.interactiveliterature.org/blog/2020/03/15/email-forwarding</link>
            <guid>https://intercode.interactiveliterature.org/blog/2020/03/15/email-forwarding</guid>
            <pubDate>Sun, 15 Mar 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Intercode can now forward emails recieved by a convention domain to appropriate staff members. For example, if your convention is hosted at 2020.example.com, and you have a staff position called Webmaster whose contact email is set as webmaster@2020.example.com, Intercode can now automatically forward emails received at that address to all the people in that staff position.]]></description>
            <content:encoded><![CDATA[<p>Intercode can now forward emails recieved by a convention domain to appropriate staff members. For example, if your convention is hosted at 2020.example.com, and you have a staff position called Webmaster whose contact email is set as <a href="mailto:webmaster@2020.example.com" target="_blank" rel="noopener noreferrer">webmaster@2020.example.com</a>, Intercode can now automatically forward emails received at that address to all the people in that staff position.</p>
<p>Additionally, staff positions can now have CC addresses (which will also receive email sent to that staff position) and aliases (additional email addresses that can be used to contact that staff position).</p>
<p>In order to take advantage of this feature, conventions will need to set the MX record on their domain name appropriately. If you'd like to do this, please contact us at <a href="mailto:hosting@neilhosting.net" target="_blank" rel="noopener noreferrer">hosting@neilhosting.net</a> for instructions!</p>]]></content:encoded>
            <category>changelog</category>
        </item>
        <item>
            <title><![CDATA[SMS Notifications]]></title>
            <link>https://intercode.interactiveliterature.org/blog/2020/01/27/sms-notifications</link>
            <guid>https://intercode.interactiveliterature.org/blog/2020/01/27/sms-notifications</guid>
            <pubDate>Mon, 27 Jan 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Intercode is now able to send SMS (text message) notifications! For conventions that keep online event signups open during the con itself, Intercode will deliver notifications of signups, withdrawals, and waitlist pulls starting 24 hours before the start of the convention. The text of notifications is customizable via the "Notification templates" feature in the Admin section.]]></description>
            <content:encoded><![CDATA[<p>Intercode is now able to send SMS (text message) notifications! For conventions that keep online event signups open during the con itself, Intercode will deliver notifications of signups, withdrawals, and waitlist pulls starting 24 hours before the start of the convention. The text of notifications is customizable via the "Notification templates" feature in the Admin section.</p>
<p>Users can opt out of SMS notifications via a new setting in their user profile for a convention. Texts will come from 415-NEIL-010 (415-634-5010).</p>]]></content:encoded>
            <category>changelog</category>
        </item>
        <item>
            <title><![CDATA[New Intercode Schedule Design]]></title>
            <link>https://intercode.interactiveliterature.org/blog/2019/10/03/new-intercode-schedule-design</link>
            <guid>https://intercode.interactiveliterature.org/blog/2019/10/03/new-intercode-schedule-design</guid>
            <pubDate>Thu, 03 Oct 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[We're rolling out some changes to how the schedule and run buckets display in Intercode 2. Here’s the highlights:]]></description>
            <content:encoded><![CDATA[<p>We're rolling out some changes to how the schedule and run buckets display in Intercode 2. Here’s the highlights:</p>
<h2 class="anchor anchorWithStickyNavbar_JRlp" id="schedule">Schedule<a href="https://intercode.interactiveliterature.org/blog/2019/10/03/new-intercode-schedule-design#schedule" class="hash-link" aria-label="Direct link to Schedule" title="Direct link to Schedule">​</a></h2>
<ul>
<li>Instead of having a thin green bar that empties as people sign up for an event, the event will have rounded ends, and act as a progress bar that goes up as people sign up. Once the event is full, it will be lightened to show that it is full.</li>
<li>Events that have unlimited slots will remain rectangular, and have a gradient background to show that you can sign up for them.</li>
<li>Events that have no slots (i.e. consuite) will remain rectangular, and have a solid background.</li>
<li>The "you are signed up for this game" has changed to a user/head icon instead of the checkbox that looked like an interactive element.</li>
<li>The concom only "Schedule With Counts" view has been updated to show the percentage of signups in the same style, as a background progress bar on each event.</li>
<li>The sorting of events on the schedule has been updated to better group multiple runs of events together if they’re sequential.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_JRlp" id="schedule-legend-example">Schedule Legend Example<a href="https://intercode.interactiveliterature.org/blog/2019/10/03/new-intercode-schedule-design#schedule-legend-example" class="hash-link" aria-label="Direct link to Schedule Legend Example" title="Direct link to Schedule Legend Example">​</a></h3>
<p><img decoding="async" loading="lazy" alt="The new schedule legend view, showing examples of types of event" src="https://intercode.interactiveliterature.org/assets/images/news_20191003_legend-2f598cad972802e87d02e05e26981407.png" width="1107" height="442" class="img_gO_M"></p>
<h2 class="anchor anchorWithStickyNavbar_JRlp" id="signup-buckets">Signup Buckets<a href="https://intercode.interactiveliterature.org/blog/2019/10/03/new-intercode-schedule-design#signup-buckets" class="hash-link" aria-label="Direct link to Signup Buckets" title="Direct link to Signup Buckets">​</a></h2>
<ul>
<li>Instead of having a broken line that turns from colored segments to gray, we’re displaying a set of empty circles that get replaced by the same user/head icon that we use on the schedule as people sign up. This should be easier to read at a glance.</li>
<li>When you click on a run in the schedule view, the same set of circles/heads are displayed there as well.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_JRlp" id="signup-bucket-examples">Signup Bucket Examples<a href="https://intercode.interactiveliterature.org/blog/2019/10/03/new-intercode-schedule-design#signup-bucket-examples" class="hash-link" aria-label="Direct link to Signup Bucket Examples" title="Direct link to Signup Bucket Examples">​</a></h3>
<p><img decoding="async" loading="lazy" alt="The view of an event run from its event page, showing the lines of empty circles for open slots" src="https://intercode.interactiveliterature.org/assets/images/news_20191003_run-48c1c9a3d28cadeb398270b2e4681424.png" width="367" height="558" class="img_gO_M"></p>
<p><img decoding="async" loading="lazy" alt="The view of an event run from the schedule grid, showing the reorganized popup view with lines of empty circles" src="https://intercode.interactiveliterature.org/assets/images/news_20191003_popup-f48d99a1d7e26e63d3e24539aebb6d17.png" width="534" height="380" class="img_gO_M"></p>]]></content:encoded>
            <category>changelog</category>
        </item>
    </channel>
</rss>