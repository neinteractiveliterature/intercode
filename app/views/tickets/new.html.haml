- if @ticket.ticket_type
  %h1 Purchase a #{@ticket.ticket_type.description.downcase} for #{convention.name}

  = bootstrap_form_tag url: ticket_path, layout: :horizontal, html: {"data-payment-form" => true} do |f|
    .payment-errors.alert.alert-danger{style: "display: none"}

    = f.static_control label: "Price" do
      = current_price.format

      - next_value_change = pricing_schedule.next_value_change_after(Time.now)
      - if next_value_change
        - next_value = pricing_schedule.value_at(next_value_change)
        %br
        %small (#{next_value.format} starting #{next_value_change.strftime("%A, %B %d")})

    = hidden_field_tag "ticket[ticket_type_id]", @ticket.ticket_type_id

    - cc_icon = capture do
      %i.fa.fa-credit-card{"data-credit-card-icon" => true}

    = f.telephone_field "", help: false, class: "cc-number", label: "Credit card number", placeholder: "•••• •••• •••• ••••", "data-stripe" => "number", append: cc_icon
    = f.telephone_field "", help: false, class: "cc-cvc", label: "CVC", placeholder: "•••", "data-stripe" => "cvc"

    = f.form_group :expiration_date, label: { text: "Expiration date" } do
      .row
        .col-xs-4.col-md-2.col-lg-1
          = text_field_tag "", '', class: 'form-control', size: 2, placeholder: "MM", "data-stripe" => "exp-month", "data-numeric" => true
        .col-xs-8.col-md-4.col-lg-2
          = text_field_tag "", '', class: 'form-control', size: 4, placeholder: "YYYY", "data-stripe" => "exp-year", "data-numeric" => true

    = f.form_group do
      %button.btn.btn-primary
        Submit payment
        %i.fa.fa-spinner.fa-spin{style: 'display: none'}
- else
  %p Choose a ticket type:

  %ul
    - @ticket_types.each do |ticket_type|
      %li= link_to ticket_type.description, new_ticket_path(ticket: {ticket_type_id: ticket_type.id})

= javascript_include_tag "https://js.stripe.com/v2/", "jquery.payment"
:javascript
  // This identifies your website in the createToken call below
  Stripe.setPublishableKey(#{Rails.configuration.stripe[:publishable_key].to_json});

  var stripeResponseHandler = function(status, response) {
    var $form = $('[data-payment-form]');

    if (response.error) {
      // Show the errors on the form
      $form.find('.payment-errors').show().text(response.error.message);
      $form.find('button').prop('disabled', false).find('.fa-spin').hide();
    } else {
      // token contains id, last4, and card type
      var token = response.id;
      // Insert the token into the form so it gets submitted to the server
      $form.append($('<input type="hidden" name="stripeToken" />').val(token));
      // and re-submit
      $form.get(0).submit();
    }
  };

  CARD_TYPE_ICONS = {
    'visa': 'fa-cc-visa',
    'mastercard': 'fa-cc-mastercard',
    'amex': 'fa-cc-amex',
    'dinersclub': 'fa-cc-dinersclub',
    'discover': 'fa-cc-discover',
    'jcb': 'fa-cc-jcb',
    'unknown': 'fa-credit-card'
  };

  jQuery(function($) {
    $('[data-numeric]').payment('restrictNumeric');
    $('.cc-number').payment('formatCardNumber').keyup(function (e) {
      var $this = $(this);
      var $cardIcon = $('[data-credit-card-icon]');
      var iconClass;
      var backgroundClass;
      var colorClass;
      var cardNumber = $this.val();

      if (cardNumber && cardNumber.length > 0) {
        var cardType = $.payment.cardType($this.val());

        if (cardType) {
          iconClass = CARD_TYPE_ICONS[cardType] || CARD_TYPE_ICONS['unknown'];

          var cardTypeObject = _.find($.payment.cards, function (card) { return card.type == cardType });
          if (_.contains(cardTypeObject.length, cardNumber.replace(/\s/g, '').length)) {
            if ($.payment.validateCardNumber(cardNumber)) {
              backgroundClass = 'bg-success';
              colorClass = 'text-success';
            } else {
              iconClass = 'fa-exclamation-triangle';
              backgroundClass = 'bg-danger';
              colorClass = 'text-danger';
            }
          }
        } else {
          iconClass = CARD_TYPE_ICONS['unknown'];
        }
      } else {
        iconClass = CARD_TYPE_ICONS['unknown'];
      }

      $cardIcon.removeClass().addClass('fa ' + iconClass + ' ' + colorClass);
    });
    $('.cc-exp').payment('formatCardExpiry');
    $('.cc-cvc').payment('formatCardCVC');
    $.fn.toggleInputError = function(erred) {
      this.parent('.form-group').toggleClass('has-error', erred);
      return this;
    };

    $('[data-payment-form]').submit(function(e) {
      var $form = $(this);
      $form.find('.payment-errors').hide();
      // Disable the submit button to prevent repeated clicks
      $form.find('button').prop('disabled', true).find('.fa-spin').show();
      Stripe.card.createToken($form, stripeResponseHandler);
      // Prevent the form from submitting with the default action
      return false;
    });
  });