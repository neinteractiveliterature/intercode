fragment EventProposalFields on EventProposal {
  id
  title
  status
  form_response_attrs_json

  event_category {
    id
    name

    event_proposal_form {
      id
      form_api_json
    }
  }

  event {
    id
  }
}

fragment EventProposalFormData on Convention {
  id
  starts_at
  ends_at
  timezone_name
  event_mailing_list_domain
}

query EventProposalQuery($eventProposalId: Int!) {
  currentAbility {
    can_delete_event_proposal(event_proposal_id: $eventProposalId)
  }

  convention {
    id
    ...EventProposalFormData
  }

  eventProposal(id: $eventProposalId) {
    id
    ...EventProposalFields
  }
}

query EventProposalQueryWithOwner($eventProposalId: Int!) {
  convention {
    id
    ...EventProposalFormData
  }

  eventProposal(id: $eventProposalId) {
    id
    ...EventProposalFields

    owner {
      id
      name
      email
    }
  }

  currentAbility {
    can_update_event_proposal(event_proposal_id: $eventProposalId)
    can_read_admin_notes_on_event_proposal(event_proposal_id: $eventProposalId)
  }
}

query EventProposalAdminNotesQuery($eventProposalId: Int!) {
  eventProposal(id: $eventProposalId) {
    id
    admin_notes
  }
}

query ProposeEventButtonQuery {
  myProfile {
    id

    user {
      id

      event_proposals {
        id
        title
        status
        created_at

        event_category {
          id
          name
        }

        convention {
          id
          name
        }
      }
    }
  }

  convention {
    id

    departments {
      id
      name
      proposal_description
    }

    event_categories {
      id
      name
      proposable
      proposal_description

      department {
        id
      }
    }
  }
}

query EventProposalsAdminQuery($page: Int, $perPage: Int, $filters: EventProposalFiltersInput, $sort: [SortInput!]) {
  convention {
    id
    timezone_name

    event_categories(current_ability_can_read_event_proposals: true) {
      id
      name
      default_color
    }

    event_proposals_paginated(page: $page, per_page: $perPage, filters: $filters, sort: $sort) {
      total_entries
      total_pages
      current_page
      per_page

      entries {
        id
        title
        length_seconds
        status
        submitted_at
        updated_at

        event_category {
          id
          name
          default_color
        }

        registration_policy {
          minimum_slots
          total_slots
          slots_limited
        }

        owner {
          id
          name_inverted
        }
      }
    }
  }
}

query EventProposalHistoryQuery($id: Int!) {
  convention {
    id
    starts_at
    ends_at
    timezone_name
  }

  eventProposal(id: $id) {
    id
    title

    owner {
      id
    }

    event_category {
      id

      event_proposal_form {
        id
        form_api_json
      }
    }

    form_response_changes {
      user_con_profile {
        id
        name_without_nickname
      }

      field_identifier
      previous_value
      new_value
      created_at
      updated_at
    }
  }
}
