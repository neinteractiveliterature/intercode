#import "../Models/commonFormFragments.graphql"

fragment TicketTypeFields on TicketType {
  id
  description
  maximum_event_provided_tickets
}

fragment MaximumEventProvidedTicketsOverrideFields on MaximumEventProvidedTicketsOverride {
  ticket_type {
    id
    ...TicketTypeFields
  }

  id
  override_value
}

fragment RoomFields on Room {
  id
  name
}

fragment EventPageEventCategoryFields on EventCategory {
  id
  name
  scheduling_ui
  default_color
  full_color
  signed_up_color
  teamMemberNamePlural
  team_member_name

  event_form {
    id
    ...CommonFormFields

    form_sections {
      id
      form_items {
        id
        admin_description
      }
    }
  }
}

fragment RunFields on Run {
  id
  starts_at
  schedule_note
  title_suffix
  room_names

  rooms {
    id
    ...RoomFields
  }
}

fragment EventFields on Event {
  id
  title
  author
  description
  organization
  url
  con_mail_destination
  can_play_concurrently
  short_blurb
  participant_communications
  content_warnings
  email
  length_seconds
  status
  description_html
  current_user_form_item_viewer_role
  current_user_form_item_writer_role
  admin_notes

  event_category {
    id
  }

  registration_policy {
    buckets {
      key
      name
      description
      minimum_slots
      preferred_slots
      total_slots
      slots_limited
      anything
      not_counted
    }
    slots_limited
    prevent_no_preference_signups
  }

  runs {
    id
    ...RunFields
  }

  maximum_event_provided_tickets_overrides {
    id
    ...MaximumEventProvidedTicketsOverrideFields
  }

  images {
    id
    byte_size
    content_type
    filename
    url
  }
}

query EventAdminSingleEventQuery($eventId: ID!) {
  currentAbility {
    can_override_maximum_event_provided_tickets
  }

  convention: conventionByRequestHost {
    id
    site_mode
    ticket_mode
    ticket_name
    timezone_mode
    timezone_name

    event(id: $eventId) {
      id
      form_response_attrs_json
      ...EventFields
    }

    event_categories {
      id
      name
      scheduling_ui

      event_form {
        ...CommonFormFields
      }

      event_proposal_form {
        ...CommonFormFields
      }
    }

    rooms {
      ...RoomFields
    }

    ticket_types {
      id
      name
      maximum_event_provided_tickets
    }
  }
}

query EventAdminRootQuery {
  convention: conventionByRequestHost {
    id
    site_mode

    events_paginated(includeDropped: true, per_page: 1) {
      total_entries
      entries {
        id
      }
    }

    event_categories {
      id
      ...EventPageEventCategoryFields
    }
  }
}

query CategorySpecificEventAdminQuery($eventCategoryId: ID!, $page: Int) {
  convention: conventionByRequestHost {
    id
    timezone_mode
    ticket_name

    event_category(id: $eventCategoryId) {
      id
      ...EventPageEventCategoryFields

      events_paginated(page: $page, per_page: 200, sort: [{ field: "title", desc: false }]) {
        total_pages

        entries {
          ...EventFields
        }
      }
    }
  }
}

query DroppedEventsAdminQuery {
  convention: conventionByRequestHost {
    id
    events_paginated(filters: { status: dropped }, includeDropped: true, sort: [{ field: "title", desc: false }]) {
      total_pages

      entries {
        id
        title

        event_category {
          id
        }
      }
    }
  }
}

query NewRunQuery($eventId: ID!) {
  convention: conventionByRequestHost {
    id
    timezone_mode
    timezone_name
    starts_at
    ends_at

    event(id: $eventId) {
      ...EventFields
    }

    rooms {
      ...RoomFields
    }
  }
}

query EditRunQuery($runId: ID!) {
  convention: conventionByRequestHost {
    id
    timezone_mode
    timezone_name
    starts_at
    ends_at

    rooms {
      ...RoomFields
    }

    run(id: $runId) {
      ...RunFields

      event {
        ...EventFields
      }
    }
  }
}
