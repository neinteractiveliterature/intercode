#import "../EventsApp/EventPage/queries.graphql"
#import "../Store/pricingStructureFields.graphql"
#import "../MySignupQueue/queries.graphql"

fragment SignupModerationRunFields on Run {
  id
  title_suffix
  starts_at

  grouped_signup_counts {
    bucket_key
    count
    counted
    state
    team_member
  }

  event {
    id
    title
    length_seconds
  }
}

fragment SignupModerationSignupRequestFields on SignupRequest {
  id
  state
  requested_bucket_key
  created_at

  user_con_profile {
    id
    name
    name_inverted
    gravatar_enabled
    gravatar_url
  }

  replace_signup {
    id

    run {
      id
      ...SignupModerationRunFields
    }
  }

  target_run {
    id
    ...SignupModerationRunFields

    event {
      id
      registration_policy {
        buckets {
          key
          name
          total_slots
          slots_limited
          anything
          not_counted
        }
        prevent_no_preference_signups
      }
    }
  }

  result_signup {
    id
    state
    waitlist_position
  }
}

query CreateSignupEventsQuery($title: String) {
  convention: conventionByRequestHost {
    id
    events_paginated(filters: { title: $title }, per_page: 50) {
      entries {
        id
        title
        length_seconds
        private_signup_list

        runs {
          id
          starts_at
          title_suffix

          rooms {
            id
            name
          }
        }
      }
    }
  }
}

query CreateSignupRunCardQuery($userConProfileId: ID!, $eventId: ID!) {
  currentAbility {
    can_read_schedule
    can_read_event_signups(eventId: $eventId)
    can_update_event(eventId: $eventId)
  }

  convention: conventionByRequestHost {
    id

    signup_rounds {
      id
      start
      maximum_event_signups
    }

    event(id: $eventId) {
      id
      title
      length_seconds
      private_signup_list
      can_play_concurrently

      registration_policy {
        ...RunCardRegistrationPolicyFields
      }

      team_members {
        id
        display_team_member
        user_con_profile {
          id
          gravatar_url
          gravatar_enabled
          name_without_nickname
        }
      }

      event_category {
        id
        team_member_name
        teamMemberNamePlural
      }

      runs {
        id
        ...EventPageRunFields
      }

      ticket_types {
        id

        providing_products {
          id
          description_html
          name
          available

          pricing_structure {
            ...PricingStructureFields
          }
        }
      }
    }

    user_con_profile(id: $userConProfileId) {
      id
      name_without_nickname

      signups {
        id
        state
        waitlist_position
        counted

        run {
          id
        }
      }

      signup_requests {
        id
        state

        target_run {
          id
        }
      }
    }
  }
}

query SignupModerationQueueQuery($page: Int, $perPage: Int) {
  convention: conventionByRequestHost {
    id

    signup_requests_paginated(
      sort: [{ field: "state", desc: false }, { field: "created_at", desc: false }]
      page: $page
      per_page: $perPage
    ) {
      total_pages

      entries {
        id
        ...SignupModerationSignupRequestFields
      }
    }
  }
}

query SignupModerationAttendeeRankedChoicesQuery($userConProfileId: ID!) {
  convention: conventionByRequestHost {
    id

    user_con_profile(id: $userConProfileId) {
      id
      name_without_nickname
      ...UserConProfileRankedChoiceQueueFields
    }
  }
}
