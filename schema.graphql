type Ability {
  can_become_user_con_profile(userConProfileId: ID): Boolean!
  can_create_cms_content_groups: Boolean!
  can_create_cms_files: Boolean!
  can_create_cms_graphql_queries: Boolean!
  can_create_cms_layouts: Boolean!
  can_create_cms_navigation_items: Boolean!
  can_create_cms_partials: Boolean!
  can_create_cms_variables: Boolean!
  can_create_orders: Boolean!
  can_create_pages: Boolean!
  can_create_tickets: Boolean!
  can_create_user_con_profiles: Boolean!
  can_delete_event(eventId: ID): Boolean! @deprecated(reason: "Deleting events is never allowed; this always returns false")
  can_delete_event_proposal(eventProposalId: ID): Boolean!
  can_delete_ticket(ticketId: ID): Boolean!
  can_delete_user_con_profile(userConProfileId: ID): Boolean!
  can_force_confirm_signup(signupId: ID): Boolean!
  can_list_events: Boolean!
  can_manage_any_cms_content: Boolean!
  can_manage_conventions: Boolean!
  can_manage_email_routes: Boolean!
  can_manage_forms: Boolean!
  can_manage_oauth_applications: Boolean!
  can_manage_rooms: Boolean!
  can_manage_runs: Boolean!
  can_manage_signups: Boolean!
  can_manage_staff_positions: Boolean!
  can_manage_ticket_types: Boolean!
  can_override_maximum_event_provided_tickets: Boolean!
  can_read_admin_notes_on_event_proposal(eventProposalId: ID): Boolean!
  can_read_any_mailing_list: Boolean!
  can_read_event_proposals: Boolean!
  can_read_event_signups(eventId: ID): Boolean!
  can_read_orders: Boolean!
  can_read_organizations: Boolean!
  can_read_reports: Boolean!
  can_read_schedule: Boolean!
  can_read_schedule_with_counts: Boolean!
  can_read_signups: Boolean!
  can_read_user_activity_alerts: Boolean!
  can_read_user_con_profiles: Boolean!
  can_read_users: Boolean!
  can_update_admin_notes_on_event_proposal(eventProposalId: ID): Boolean!
  can_update_bucket_signup(signupId: ID): Boolean!
  can_update_convention: Boolean!
  can_update_counted_signup(signupId: ID): Boolean!
  can_update_departments: Boolean!
  can_update_event(eventId: ID): Boolean!
  can_update_event_categories: Boolean!
  can_update_event_proposal(eventProposalId: ID): Boolean!
  can_update_notification_templates: Boolean!
  can_update_orders: Boolean!
  can_update_products: Boolean!
  can_update_signup(signupId: ID): Boolean!
  can_update_signups: Boolean!
  can_update_ticket(ticketId: ID): Boolean!
  can_update_user_con_profile(userConProfileId: ID): Boolean!
  can_withdraw_all_user_con_profile_signups(userConProfileId: ID): Boolean!
}

"""
Autogenerated input type of AcceptClickwrapAgreement
"""
input AcceptClickwrapAgreementInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AcceptClickwrapAgreement.
"""
type AcceptClickwrapAgreementPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  my_profile: UserConProfile!
}

"""
Autogenerated input type of AcceptSignupRequest
"""
input AcceptSignupRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of AcceptSignupRequest.
"""
type AcceptSignupRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signup: Signup!
  signup_request: SignupRequest!
}

type ActiveStorageAttachment {
  byte_size: Int!
  content_type: String!
  filename: String!
  id: ID!
  resized_url(maxHeight: Int!, maxWidth: Int!): String
  url: String!
}

"""
Autogenerated input type of AddOrderEntryToCurrentPendingOrder
"""
input AddOrderEntryToCurrentPendingOrderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order_entry: OrderEntryInput!
  pay_what_you_want_amount: MoneyInput
}

"""
Autogenerated return type of AddOrderEntryToCurrentPendingOrder.
"""
type AddOrderEntryToCurrentPendingOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order_entry: OrderEntry!
}

"""
Autogenerated input type of AttachImageToEvent
"""
input AttachImageToEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  signedBlobId: ID!
}

"""
Autogenerated return type of AttachImageToEvent.
"""
type AttachImageToEventPayload {
  attachment: ActiveStorageAttachment!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event!
}

"""
Autogenerated input type of AttachImageToEventProposal
"""
input AttachImageToEventProposalInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  signedBlobId: ID!
}

"""
Autogenerated return type of AttachImageToEventProposal.
"""
type AttachImageToEventProposalPayload {
  attachment: ActiveStorageAttachment!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_proposal: EventProposal!
}

type AuthorizedApplication {
  name: String!
  scopes: [String!]!
  uid: ID!
}

scalar BigDecimal

"""
Autogenerated input type of CancelOrder
"""
input CancelOrderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  skip_refund: Boolean
}

"""
Autogenerated return type of CancelOrder.
"""
type CancelOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order: Order!
}

type ChoiceCount {
  choice: Int!
  count: Int!
  state: SignupState!
}

union CmsContent = CmsLayout | CmsPartial | Page

type CmsContentGroup {
  contents: [CmsContent!]!
  current_ability_can_delete: Boolean!
  current_ability_can_update: Boolean!
  id: ID!
  name: String!
  permissions: [Permission!]!
}

input CmsContentGroupInput {
  contents: [CmsContentInput!]
  name: String
}

input CmsContentInput {
  content_type: CmsContentTypeIndicator!
  id: ID
}

enum CmsContentTypeIndicator {
  CmsLayout
  CmsPartial
  Page
}

type CmsFile {
  current_ability_can_delete: Boolean!
  file: ActiveStorageAttachment!
  id: ID!
}

type CmsGraphqlQuery {
  admin_notes: String
  current_ability_can_delete: Boolean!
  current_ability_can_update: Boolean!
  id: ID!
  identifier: String!
  query: String!
}

input CmsGraphqlQueryInput {
  admin_notes: String
  identifier: String
  query: String
}

type CmsLayout {
  admin_notes: String
  content: String
  content_html(path: String): String
  content_html_with_placeholders(path: String): String
  current_ability_can_delete: Boolean!
  current_ability_can_update: Boolean!
  id: ID!
  name: String
  navbar_classes: String
}

input CmsLayoutInput {
  admin_notes: String
  content: String
  name: String
  navbar_classes: String
}

type CmsNavigationItem {
  id: ID!
  navigation_section: CmsNavigationItem
  page: Page
  position: Int
  title: String
}

input CmsNavigationItemInput {
  navigationSectionId: ID
  pageId: ID
  position: Int
  title: String
}

"""
A CMS parent is a web site managed by Intercode. It acts as a container for CMS content, such
as pages, partials, files, layouts, variables, content groups, and user-defined GraphQL queries.

Most CMS parents are conventions, so their content will be convention-specific and scoped to
that convention's domain name. The exception to this is the root site, which is what Intercode
renders when there is no convention associated with the current domain name. (See the RootSite
object for more details about this.)
"""
interface CmsParent {
  """
  Finds a CMS content group by ID within the domain name of this HTTP request. If there is no
  CMS content group with that ID, or the CMS content group is associated with a different
  domain name, errors out.
  """
  cmsContentGroup(
    """
    The ID of the CMS content group to find.
    """
    id: ID!
  ): CmsContentGroup!

  """
  Returns all CMS content groups within the current domain.
  """
  cmsContentGroups: [CmsContentGroup!]!

  """
  Returns all CMS files within the current domain.
  """
  cmsFiles: [CmsFile!]!

  """
  Returns all CMS GraphQL queries within the current domain.
  """
  cmsGraphqlQueries: [CmsGraphqlQuery!]!

  """
  Returns all CMS layouts within the current domain.
  """
  cmsLayouts: [CmsLayout!]!

  """
  Returns all CMS navigation items within the current domain.
  """
  cmsNavigationItems: [CmsNavigationItem!]!

  """
  Finds a CMS page within the domain name of this HTTP request. Exactly one of the three
  optional arguments (`id`, `slug`, and `rootPage`) must be specified. These each represent a
  different way of finding a page. If the desired page can't be found within the current
  domain name, errors out.
  """
  cmsPage(
    """
    The ID of the page to find.
    """
    id: ID

    """
    If true, returns the root page for this domain.
    """
    rootPage: Boolean

    """
    The unique slug of the page to find.
    """
    slug: String
  ): Page!

  """
  Returns all CMS pages within the current domain.
  """
  cmsPages: [Page!]!

  """
  Returns all CMS partials within the current domain.
  """
  cmsPartials: [CmsPartial!]!

  """
  Returns all CMS variables within the current domain.
  """
  cmsVariables: [CmsVariable!]!

  """
  Returns the default CMS layout used in this domain.
  """
  defaultLayout: CmsLayout!

  """
  Returns the CMS layout to be used for a particular URL path within the current domain. (This
  will be the page-specific layout if the URL corresponds to a page with a layout override, or
  the default layout for the domain otherwise.)
  """
  effectiveCmsLayout(
    """
    The path to find the effective layout for.
    """
    path: String!
  ): CmsLayout!

  """
  Does a full-text search within this domain.
  """
  fullTextSearch(
    """
    The text to search for.
    """
    query: String!
  ): SearchResult!

  """
  The ID of this object.
  """
  id: ID!

  """
  Returns all the Liquid assigns for regular CMS page rendering in the current domain name.
  This is a combination of globally-accessible Liquid assigns and domain-specific user-defined
  CMS variables.
  """
  liquidAssigns: [LiquidAssign!]!

  """
  Given a Liquid text string, renders it to HTML and returns the result.
  """
  previewLiquid(
    """
    The Liquid content to render.
    """
    content: String!
  ): String!

  """
  Given a Markdown text string, renders it to HTML and returns the result.
  """
  previewMarkdown(
    """
    The event ID that this Markdown will apply to, if applicable.
    """
    eventId: ID

    """
    The event proposal ID that this Markdown will apply to, if applicable.
    """
    eventProposalId: ID

    """
    The Markdown content to render.
    """
    markdown: String!
  ): String!

  """
  The CMS page used for the root path (/) of this domain.
  """
  rootPage: Page!

  """
  Finds CMS content by partial name, case-insensitive, within the current domain's CMS content.
  For example, in a convention that has a partial called `attendee_profile` and a page called
  `info_for_attendees`, a search for `attendee` would return both of these.

  This query is always limited to a maximum of 10 results.
  """
  typeaheadSearchCmsContent(
    """
    The partial name to search by.  If not specified, returns all CMS content
    within the current domain (limited to 10 results).
    """
    name: String
  ): [CmsContent!]!
}

type CmsPartial {
  admin_notes: String
  content: String
  current_ability_can_delete: Boolean!
  current_ability_can_update: Boolean!
  id: ID!
  name: String
}

input CmsPartialInput {
  admin_notes: String
  content: String
  name: String
}

type CmsVariable {
  current_ability_can_delete: Boolean!
  current_ability_can_update: Boolean!
  id: ID!
  key: String!
  value_json: String!
}

input CmsVariableInput {
  key: String!
  value_json: String!
}

type ContactEmail {
  email: String!
  formatted_address: String!
  metadata_json: Json!
  name: String
}

"""
A Convention in Intercode is essentially a web site hosted by Intercode.  A Convention can represent an actual,
real-world convention (and this is probably the most common use case), but it can also represent a single event
(if the site_mode is set to single_event) or a series of events over time (if the site_mode is set to event_series).

They're called Convention for historical reasons, because naming is hard.  Sorry.  It's probably best to think of
them as "web site."
"""
type Convention implements CmsParent {
  """
  Is this convention currently accepting event proposals?
  """
  accepting_proposals: Boolean

  """
  User profiles in this convention that can have a bio (because they're staff or event team members).
  """
  bio_eligible_user_con_profiles: [UserConProfile!]!

  """
  Is this convention canceled?
  """
  canceled: Boolean!

  """
  If this convention's email_mode is set to staff_emails_to_catch_all, all email sent to staff position email
  addresses at this convention will be forwarded to this staff position.
  """
  catch_all_staff_position: StaffPosition

  """
  A clickwrap agreement, in Liquid format.  If present, users will have to agree to this before they're allowed to
  use the web site.
  """
  clickwrap_agreement: String

  """
  The value of clickwrap_agreement, rendered as HTML.
  """
  clickwrap_agreement_html: String

  """
  Finds a CMS content group by ID within the domain name of this HTTP request. If there is no
  CMS content group with that ID, or the CMS content group is associated with a different
  domain name, errors out.
  """
  cmsContentGroup(
    """
    The ID of the CMS content group to find.
    """
    id: ID!
  ): CmsContentGroup!

  """
  Returns all CMS content groups within the current domain.
  """
  cmsContentGroups: [CmsContentGroup!]!

  """
  Returns all CMS files within the current domain.
  """
  cmsFiles: [CmsFile!]!

  """
  Returns all CMS GraphQL queries within the current domain.
  """
  cmsGraphqlQueries: [CmsGraphqlQuery!]!

  """
  Returns all CMS layouts within the current domain.
  """
  cmsLayouts: [CmsLayout!]!

  """
  Returns all CMS navigation items within the current domain.
  """
  cmsNavigationItems: [CmsNavigationItem!]!

  """
  Finds a CMS page within the domain name of this HTTP request. Exactly one of the three
  optional arguments (`id`, `slug`, and `rootPage`) must be specified. These each represent a
  different way of finding a page. If the desired page can't be found within the current
  domain name, errors out.
  """
  cmsPage(
    """
    The ID of the page to find.
    """
    id: ID

    """
    If true, returns the root page for this domain.
    """
    rootPage: Boolean

    """
    The unique slug of the page to find.
    """
    slug: String
  ): Page!

  """
  Returns all CMS pages within the current domain.
  """
  cmsPages: [Page!]!

  """
  Returns all CMS partials within the current domain.
  """
  cmsPartials: [CmsPartial!]!

  """
  Returns all CMS variables within the current domain.
  """
  cmsVariables: [CmsVariable!]!
  coupons_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: CouponFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): CouponsPagination!

  """
  When this convention was created.
  """
  created_at: Date

  """
  Returns the default CMS layout used in this domain.
  """
  defaultLayout: CmsLayout!

  """
  The ISO 4217 currency code used by default for products in this convention.  If null, defaults to USD.
  """
  default_currency_code: String

  """
  All the departments in this convention.
  """
  departments: [Department!]!

  """
  The domain name used for serving this convention web site.
  """
  domain: String

  """
  Returns the CMS layout to be used for a particular URL path within the current domain. (This
  will be the page-specific layout if the URL corresponds to a page with a layout override, or
  the default layout for the domain otherwise.)
  """
  effectiveCmsLayout(
    """
    The path to find the effective layout for.
    """
    path: String!
  ): CmsLayout!

  """
  The default address that site emails will be sent from.
  """
  email_from: String!

  """
  How this convention site will handle incoming emails to its domain.
  """
  email_mode: EmailMode!

  """
  When this convention ends.
  """
  ends_at: Date

  """
  Finds an active event by ID in this convention. If there is no event with that ID in this
  convention, or the event is no longer active, errors out.
  """
  event(
    """
    The ID of the event to find
    """
    id: ID!
  ): Event!

  """
  All the EventCategories in this convention.
  """
  event_categories(
    """
    If true, will only return EventCategories where the current user is allowed to read event proposals.
    """
    current_ability_can_read_event_proposals: Boolean
  ): [EventCategory!]!

  """
  If present, the site will automatically offer to set up forwarding email addresses for event teams under this
  domain.
  """
  event_mailing_list_domain: String

  """
  Finds an event proposal by ID in this convention. If there is no event proposal with that ID
  in this convention, errors out.
  """
  event_proposal(
    """
    The ID of the event proposal to find.
    """
    id: ID!
  ): EventProposal!
  event_proposals_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: EventProposalFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): EventProposalsPagination!

  """
  Returns all active events in convention associated with the domain name of this HTTP request.
  Filterable by a range of start/finish times.

  **CAUTION:** this query can return a lot of data and take a long time. Please be careful
  when using it.
  """
  events(
    """
    If present, filters the returned events.
    """
    filters: EventFiltersInput

    """
    If present, only returns events that occur earlier than this time
    (non-inclusive.) These events may end after this time, but start before it.
    """
    finish: Date

    """
    If true, includes dropped events in addition to active events.
    """
    includeDropped: Boolean

    """
    If present, only returns events that occur at this time or later. (These
    events may have started before that time, but will still be ongoing during it.)
    """
    start: Date
  ): [Event!]!
  events_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: EventFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): EventsPagination!

  """
  The favicon that will be served to browsers on this site.
  """
  favicon: ActiveStorageAttachment
  favicon_url: String @deprecated(reason: "Please use the favicon field instead.")

  """
  Finds a form by ID in this convention. If there is no form with that ID in this convention,
  errors out.
  """
  form(
    """
    The ID of the form to find.
    """
    id: ID!
  ): Form!

  """
  All the forms in this convention.
  """
  forms: [Form!]!

  """
  Does a full-text search within this domain.
  """
  fullTextSearch(
    """
    The text to search for.
    """
    query: String!
  ): SearchResult!

  """
  If true, this convention will not be listed in CMS content on the root site.
  """
  hidden: Boolean!

  """
  The ID of this convention.
  """
  id: ID!

  """
  The language to use for localized content in this site.
  """
  language: String!

  """
  Returns all the Liquid assigns for regular CMS page rendering in the current domain name.
  This is a combination of globally-accessible Liquid assigns and domain-specific user-defined
  CMS variables.
  """
  liquidAssigns: [LiquidAssign!]!

  """
  The physical location of the convention, in Mapbox format.
  """
  location: Json

  """
  A sub-object for accessing this convention's autogenerated mailing lists.
  """
  mailing_lists: MailingLists!

  """
  The schedule of how many signups are allowed in this convention and when.
  """
  maximum_event_signups: ScheduledValue @deprecated(reason: "Please use SignupRound instead")

  """
  The maximum number of tickets this convention can sell.
  """
  maximum_tickets: Int

  """
  Returns the convention-specific profile for the current user within this convention. If no
  user is signed in, returns null.
  """
  my_profile: UserConProfile

  """
  Returns all signup ranked choices for the current user within this convention. If no user is signed in,
  returns an empty array.
  """
  my_signup_ranked_choices: [SignupRankedChoice!]!

  """
  Returns all signup requests for the current user within this convention. If no user is signed in,
  returns an empty array.
  """
  my_signup_requests: [SignupRequest!]!

  """
  Returns all signups for the current user within this convention. If no user is signed in,
  returns an empty array.
  """
  my_signups: [Signup!]!

  """
  The name of this convention.
  """
  name: String!

  """
  All the NotificationTemplates in this convention.
  """
  notification_templates: [NotificationTemplate!]!

  """
  Returns all the Liquid assigns for rendering a particular notification event in this
  convention. This is a combination of globally-accessible Liquid assigns, values specific
  to that notification event, and convention-specific user-defined CMS variables.
  """
  notifier_liquid_assigns(
    """
    The key of the notification event to use for generating assigns.
    """
    eventKey: String!
  ): [LiquidAssign!]!

  """
  The image that will be served from this site using the `<meta property="og:image">` tag.  For more information
  about OpenGraph, see https://ogp.me/.
  """
  open_graph_image: ActiveStorageAttachment
  open_graph_image_url: String @deprecated(reason: "Please use the open_graph_image field instead.")
  orders_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: OrderFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): OrdersPagination!

  """
  The organization in charge of this convention.
  """
  organization: Organization

  """
  If present, a block of HTML content to show above the schedule on various schedule pages.
  """
  pre_schedule_content_html: String

  """
  Given a Liquid text string, renders it to HTML and returns the result.
  """
  previewLiquid(
    """
    The Liquid content to render.
    """
    content: String!
  ): String!

  """
  Given a Markdown text string, renders it to HTML and returns the result.
  """
  previewMarkdown(
    """
    The event ID that this Markdown will apply to, if applicable.
    """
    eventId: ID

    """
    The event proposal ID that this Markdown will apply to, if applicable.
    """
    eventProposalId: ID

    """
    The Markdown content to render.
    """
    markdown: String!
  ): String!

  """
  Given a Liquid text string and a notification event, renders the Liquid to HTML using the
  current domain's CMS context as if it were the content for that notification type.
  """
  preview_notifier_liquid(
    """
    The Liquid content to render.
    """
    content: String!

    """
    The key of the notification event to use for generating the preview.
    """
    eventKey: String!
  ): String!

  """
  Finds a product by ID in this convention. If there is no product with that ID in this
  convention, errors out.
  """
  product(
    """
    The ID of the product to find.
    """
    id: ID!
  ): Product!

  """
  Returns the products in this convention.
  """
  products(
    """
    If true, only returns products that are currently available for purchase.
    """
    only_available: Boolean

    """
    If true, only returns products that provide the buyer a ticket to this convention.
    """
    only_ticket_providing: Boolean
  ): [Product!]!

  """
  A sub-object containing various reports that can be generated for this convention.
  """
  reports: ConventionReports!

  """
  All the rooms in this convention.
  """
  rooms: [Room!]!

  """
  The CMS page used for the root path (/) of this domain.
  """
  rootPage: Page!

  """
  Finds an active run by ID in this convention. If there is no run with that ID in this
  convention, or the run's event is no longer active, errors out.
  """
  run(
    """
    The ID of the run to find
    """
    id: ID!
  ): Run!
  runs_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: RunFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): RunsPagination!

  """
  Who can currently see the event catalog?
  """
  show_event_list: ShowSchedule

  """
  Who can currently see the event schedule?
  """
  show_schedule: ShowSchedule

  """
  Finds a signup by ID in this convention. If there is no signup with that ID in this
  convention, errors out.
  """
  signup(
    """
    The ID of the signup to find.
    """
    id: ID!
  ): Signup!

  """
  The type of signup automation used for this convention.
  """
  signup_automation_mode: SignupAutomationMode!
  signup_changes_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: SignupChangeFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): SignupChangesPagination!
  signup_counts_by_state: [SignupCountByState!]!

  """
  The signup mode used for this convention.
  """
  signup_mode: SignupMode!

  """
  In a moderated-signup convention, are signup requests currently allowed?
  """
  signup_requests_open: Boolean!
  signup_requests_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: SignupRequestFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): SignupRequestsPagination!

  """
  Finds a signup round by ID in this convention. If there is no signup round with that ID in this convention,
  errors out.
  """
  signup_round(
    """
    The ID of the signup round to find.
    """
    id: ID!
  ): SignupRound!

  """
  The signup rounds in this convention.
  """
  signup_rounds: [SignupRound!]!

  """
  The mode this convention site is operating in.
  """
  site_mode: SiteMode!

  """
  Finds a staff position by ID in this convention. If there is no staff position with that ID
  in this convention, errors out.
  """
  staff_position(
    """
    The ID of the staff position to find.
    """
    id: ID!
  ): StaffPosition!

  """
  All the staff positions in this convention.
  """
  staff_positions: [StaffPosition!]!

  """
  When this convention starts.
  """
  starts_at: Date

  """
  The Stripe account this convention uses for payments.
  """
  stripe_account: StripeAccount

  """
  The ID of the Stripe account this convention uses for payments.
  """
  stripe_account_id: String

  """
  Is this convention's Stripe account in a state where the convention can accept payments?
  """
  stripe_account_ready_to_charge: Boolean!

  """
  The publishable key of this convention's Stripe account.
  """
  stripe_publishable_key: String

  """
  The word this convention uses for 'tickets'.
  """
  ticketNamePlural: String!

  """
  The mode used for ticket behaviors in this convention.
  """
  ticket_mode: TicketMode!

  """
  The word this convention uses for 'ticket'.
  """
  ticket_name: String!

  """
  All the ticket types in this convention.
  """
  ticket_types: [TicketType!]!

  """
  Can users currently buy tickets to this convention?
  """
  tickets_available_for_purchase: Boolean!

  """
  The mode used for time zone display and time conversion behavior in this site.
  """
  timezone_mode: TimezoneMode!

  """
  The home time zone of this convention.
  """
  timezone_name: String

  """
  Finds CMS content by partial name, case-insensitive, within the current domain's CMS content.
  For example, in a convention that has a partial called `attendee_profile` and a page called
  `info_for_attendees`, a search for `attendee` would return both of these.

  This query is always limited to a maximum of 10 results.
  """
  typeaheadSearchCmsContent(
    """
    The partial name to search by.  If not specified, returns all CMS content
    within the current domain (limited to 10 results).
    """
    name: String
  ): [CmsContent!]!

  """
  When this convention was last modified.
  """
  updated_at: Date

  """
  Find a UserActivityAlert by ID.
  """
  user_activity_alert(
    """
    The ID of the UserActivityAlert to find.
    """
    id: ID!
  ): UserActivityAlert!

  """
  All the UserActivityAlerts in this convention.
  """
  user_activity_alerts: [UserActivityAlert!]!

  """
  Finds a UserConProfile by ID in the convention associated with this convention. If there is
  no UserConProfile with that ID in this convention, errors out.
  """
  user_con_profile(
    """
    The ID of the UserConProfile to find.
    """
    id: ID!
  ): UserConProfile!

  """
  Finds a UserConProfile by user ID in the convention associated with this convention. If
  there is no UserConProfile with that user ID in this convention, errors out.
  """
  user_con_profile_by_user_id(
    """
    The user ID of the UserConProfile to find.
    """
    userId: ID!
  ): UserConProfile!

  """
  The form used for user profiles in this convention.
  """
  user_con_profile_form: Form!
  user_con_profiles_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: UserConProfileFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): UserConProfilesPagination!
}

input ConventionFiltersInput {
  name: String
  organization_name: String
}

"""
An input for creating or modifying Conventions.
"""
input ConventionInput {
  """
  Is this convention currently accepting event proposals?
  """
  accepting_proposals: Boolean

  """
  The ID of the StaffPosition to set as the catch-all for inbound emails.
  """
  catchAllStaffPositionId: ID

  """
  The clickwrap agreement for the convention, in Liquid format.
  """
  clickwrap_agreement: String

  """
  The ISO 4217 currency code to use as the default for products in this convention.
  """
  defaultCurrencyCode: String

  """
  The ID of the CmsLayout to use as the default layout for pages in this convention.
  """
  defaultLayoutId: ID

  """
  The domain name to use for serving this convention web site.
  """
  domain: String

  """
  The default address to send site emails from.
  """
  email_from: String

  """
  How this convention site should handle incoming emails to its domain.
  """
  email_mode: EmailMode

  """
  When this convention ends.
  """
  ends_at: Date

  """
  A domain to use to set up forwarding email addresses for event teams.
  """
  event_mailing_list_domain: String

  """
  A favicon image to serve to browsers on this site.
  """
  favicon: Upload

  """
  Should this event be hidden from CMS content on the root site?
  """
  hidden: Boolean

  """
  The language code to use for localized content in this site (e.g. 'en' for English, 'es' for Spanish).
  """
  language: String

  """
  The physical location of this convention, in Mapbox format.
  """
  location: Json

  """
  The schedule of how many signups are allowed in this convention and when.
  """
  maximum_event_signups: ScheduledValueInput @deprecated(reason: "Please use SignupRound instead")

  """
  The maximum number of tickets this convention should be able to sell.
  """
  maximum_tickets: Int

  """
  The name of this convention.
  """
  name: String

  """
  The image that should be served from this site using the `<meta property="og:image">` tag.  For more information
  about OpenGraph, see https://ogp.me/.
  """
  openGraphImage: Upload

  """
  The ID of the Page to serve at the root path (/) of this convention site.
  """
  rootPageId: ID

  """
  Who should be able to see the event catalog?
  """
  show_event_list: ShowSchedule

  """
  Who should be able to see the event schedule?
  """
  show_schedule: ShowSchedule

  """
  The type of signup automation to use for this convention.
  """
  signup_automation_mode: SignupAutomationMode

  """
  The signup mode to use for this convention.
  """
  signup_mode: SignupMode

  """
  In a moderated-signup convention, should signup requests currently be allowed?
  """
  signup_requests_open: Boolean

  """
  The mode this convention site should operate in.
  """
  site_mode: SiteMode

  """
  When this convention starts.
  """
  starts_at: Date

  """
  The mode to use for ticket behaviors in this convention.
  """
  ticket_mode: TicketMode

  """
  The word this convention should use for 'ticket'.
  """
  ticket_name: String

  """
  The mode to use for time zone display and time conversion behavior in this site.
  """
  timezone_mode: TimezoneMode

  """
  The home time zone for this convention.
  """
  timezone_name: String
}

"""
Reports that can be queried against a convention.
"""
type ConventionReports {
  """
  A report of all tickets provided by events at this convention.
  """
  event_provided_tickets: [EventProvidedTicketList!]!

  """
  A report of events people signed up for along with which numbered choice they were for that person.
  """
  events_by_choice: [EventWithChoiceCounts!]!

  """
  A breakdown of all product and ticket sales in this convention.
  """
  sales_count_by_product_and_payment_amount: [SalesCountByProductAndPaymentAmount!]!

  """
  The total revenue taken in by this convention, optionally filtered by various parameters.
  """
  sum_revenue(
    """
    If specified, only counts revenue from orders with these statuses.
    """
    orderStatuses: [OrderStatus!]

    """
    If specified, only counts revenue from these products.
    """
    productIds: [ID!]
  ): Money!
  ticket_count_by_type_and_payment_amount: [TicketCountByTypeAndPaymentAmount!]! @deprecated(reason: "This only takes ticket sales into account.  Please use the sales_count_by_product_and_payment_amount field instead.")
  total_revenue: Money! @deprecated(reason: "This only takes ticket sales into account.  Please use the sum_revenue field instead.")
}

type ConventionsPagination implements PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!
  entries: [Convention!]!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

"""
Autogenerated input type of ConvertTicketToEventProvided
"""
input ConvertTicketToEventProvidedInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID
  ticketTypeId: ID
  userConProfileId: ID
}

"""
Autogenerated return type of ConvertTicketToEventProvided.
"""
type ConvertTicketToEventProvidedPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ticket we deleted in order to provide a new ticket
  """
  deleted_ticket: Ticket!
  refund_status: RefundStatus!

  """
  The new ticket we just provided
  """
  ticket: Ticket!
}

type Coupon {
  code: String!
  convention: Convention!
  expires_at: Date
  fixed_amount: Money
  id: ID!
  percent_discount: BigDecimal
  provides_product: Product
  usage_limit: Int
}

type CouponApplication {
  coupon: Coupon!
  discount: Money!
  id: ID!
  order: Order!
}

input CouponFiltersInput {
  code: String
}

input CouponInput {
  code: String
  expires_at: Date
  fixed_amount: MoneyInput
  percent_discount: BigDecimal
  providesProductId: ID
  usage_limit: Int
}

type CouponsPagination implements PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!
  entries: [Coupon!]!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

"""
Autogenerated input type of CreateCmsContentGroup
"""
input CreateCmsContentGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_content_group: CmsContentGroupInput!
  permissions: [PermissionInput!]
}

"""
Autogenerated return type of CreateCmsContentGroup.
"""
type CreateCmsContentGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_content_group: CmsContentGroup!
}

"""
Autogenerated input type of CreateCmsFile
"""
input CreateCmsFileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  file: Upload @deprecated(reason: "Migrating to ActiveStorage direct uploads; please use signed_blob_id instead")
  signedBlobId: ID
}

"""
Autogenerated return type of CreateCmsFile.
"""
type CreateCmsFilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_file: CmsFile!
}

"""
Autogenerated input type of CreateCmsGraphqlQuery
"""
input CreateCmsGraphqlQueryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  query: CmsGraphqlQueryInput!
}

"""
Autogenerated return type of CreateCmsGraphqlQuery.
"""
type CreateCmsGraphqlQueryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  query: CmsGraphqlQuery!
}

"""
Autogenerated input type of CreateCmsLayout
"""
input CreateCmsLayoutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_layout: CmsLayoutInput!
}

"""
Autogenerated return type of CreateCmsLayout.
"""
type CreateCmsLayoutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_layout: CmsLayout!
}

"""
Autogenerated input type of CreateCmsNavigationItem
"""
input CreateCmsNavigationItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_navigation_item: CmsNavigationItemInput!
}

"""
Autogenerated return type of CreateCmsNavigationItem.
"""
type CreateCmsNavigationItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_navigation_item: CmsNavigationItem!
}

"""
Autogenerated input type of CreateCmsPartial
"""
input CreateCmsPartialInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_partial: CmsPartialInput!
}

"""
Autogenerated return type of CreateCmsPartial.
"""
type CreateCmsPartialPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_partial: CmsPartial!
}

"""
Autogenerated input type of CreateConvention
"""
input CreateConventionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cloneConventionId: ID
  cms_content_set_name: String
  convention: ConventionInput!
  organizationId: ID
}

"""
Autogenerated return type of CreateConvention.
"""
type CreateConventionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  convention: Convention!
}

"""
Autogenerated input type of CreateConventionStripeAccount
"""
input CreateConventionStripeAccountInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateConventionStripeAccount.
"""
type CreateConventionStripeAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  stripe_account: StripeAccount!
}

"""
Autogenerated input type of CreateCouponApplication
"""
input CreateCouponApplicationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coupon_code: String!
  orderId: ID
}

"""
Autogenerated return type of CreateCouponApplication.
"""
type CreateCouponApplicationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coupon_application: CouponApplication!
}

"""
Autogenerated input type of CreateCoupon
"""
input CreateCouponInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coupon: CouponInput!
}

"""
Autogenerated return type of CreateCoupon.
"""
type CreateCouponPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coupon: Coupon!
}

"""
Autogenerated input type of CreateDepartment
"""
input CreateDepartmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  department: DepartmentInput!
}

"""
Autogenerated return type of CreateDepartment.
"""
type CreateDepartmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  department: Department!
}

"""
Autogenerated input type of CreateEmailRoute
"""
input CreateEmailRouteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email_route: EmailRouteInput!
}

"""
Autogenerated return type of CreateEmailRoute.
"""
type CreateEmailRoutePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email_route: EmailRoute!
}

"""
Autogenerated input type of CreateEventCategory
"""
input CreateEventCategoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_category: EventCategoryInput!
}

"""
Autogenerated return type of CreateEventCategory.
"""
type CreateEventCategoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_category: EventCategory!
}

"""
Autogenerated input type of CreateEvent
"""
input CreateEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: EventInput!
  signedImageBlobIds: [ID!]
}

"""
Autogenerated return type of CreateEvent.
"""
type CreateEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event!
}

"""
Autogenerated input type of CreateEventProposal
"""
input CreateEventProposalInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cloneEventProposalId: ID
  eventCategoryId: ID
}

"""
Autogenerated return type of CreateEventProposal.
"""
type CreateEventProposalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_proposal: EventProposal!
}

"""
Autogenerated input type of CreateFillerEvent
"""
input CreateFillerEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: EventInput!
  run: RunInput
  signedImageBlobIds: [ID!]
}

"""
Autogenerated return type of CreateFillerEvent.
"""
type CreateFillerEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event!
}

"""
Autogenerated input type of CreateForm
"""
input CreateFormInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The properties for the form to create.
  """
  form: FormInput!

  """
  The type of form to create.
  """
  form_type: FormType!
}

"""
Autogenerated input type of CreateFormItem
"""
input CreateFormItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  formSectionId: ID
  form_item: FormItemInput!
}

"""
Autogenerated return type of CreateFormItem.
"""
type CreateFormItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form_item: FormItem!
}

"""
Autogenerated return type of CreateForm.
"""
type CreateFormPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The form that has just been created.
  """
  form: Form!
}

"""
Autogenerated input type of CreateFormSection
"""
input CreateFormSectionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  formId: ID
  form_section: FormSectionInput!
}

"""
Autogenerated return type of CreateFormSection.
"""
type CreateFormSectionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form_section: FormSection!
}

"""
Autogenerated input type of CreateFormWithJSON
"""
input CreateFormWithJSONInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form_json: String!
  form_type: FormType!
}

"""
Autogenerated return type of CreateFormWithJSON.
"""
type CreateFormWithJSONPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form: Form!
}

"""
Autogenerated input type of CreateMaximumEventProvidedTicketsOverride
"""
input CreateMaximumEventProvidedTicketsOverrideInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID
  override_value: Int!
  ticketTypeId: ID
}

"""
Autogenerated return type of CreateMaximumEventProvidedTicketsOverride.
"""
type CreateMaximumEventProvidedTicketsOverridePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  maximum_event_provided_tickets_override: MaximumEventProvidedTicketsOverride!
}

"""
Autogenerated input type of CreateMultipleRuns
"""
input CreateMultipleRunsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID
  runs: [RunInput!]!
}

"""
Autogenerated return type of CreateMultipleRuns.
"""
type CreateMultipleRunsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  runs: [Run!]!
}

"""
Autogenerated input type of CreateMySignup
"""
input CreateMySignupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  no_requested_bucket: Boolean
  requested_bucket_key: String
  runId: ID
}

"""
Autogenerated return type of CreateMySignup.
"""
type CreateMySignupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signup: Signup!
}

"""
Autogenerated input type of CreateOrderEntry
"""
input CreateOrderEntryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  orderId: ID
  order_entry: OrderEntryInput!
}

"""
Autogenerated return type of CreateOrderEntry.
"""
type CreateOrderEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order_entry: OrderEntry!
}

"""
Autogenerated input type of CreateOrder
"""
input CreateOrderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order: OrderInput!
  order_entries: [OrderEntryInput!]
  status: OrderStatus!
  userConProfileId: ID
}

"""
Autogenerated return type of CreateOrder.
"""
type CreateOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order: Order!
}

"""
Autogenerated input type of CreateOrganizationRole
"""
input CreateOrganizationRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  organizationId: ID
  organization_role: OrganizationRoleInput!
  permissions: [PermissionInput!]!
  userIds: [ID!]
}

"""
Autogenerated return type of CreateOrganizationRole.
"""
type CreateOrganizationRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  organization_role: OrganizationRole!
}

"""
Autogenerated input type of CreatePage
"""
input CreatePageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  page: PageInput!
}

"""
Autogenerated return type of CreatePage.
"""
type CreatePagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  page: Page!
}

"""
Autogenerated input type of CreateProduct
"""
input CreateProductInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  product: ProductInput!
}

"""
Autogenerated return type of CreateProduct.
"""
type CreateProductPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  product: Product!
}

"""
Autogenerated input type of CreateRankedChoiceUserConstraint
"""
input CreateRankedChoiceUserConstraintInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The constraint to create.
  """
  rankedChoiceUserConstraint: RankedChoiceUserConstraintInput!

  """
  The user profile to apply this constraint to.  If not specified, will use the current user profile.
  """
  userConProfileId: ID
}

"""
Autogenerated return type of CreateRankedChoiceUserConstraint.
"""
type CreateRankedChoiceUserConstraintPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The RankedChoiceUserConstraint that has just been created.
  """
  ranked_choice_user_constraint: RankedChoiceUserConstraint!
}

"""
Autogenerated input type of CreateRoom
"""
input CreateRoomInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  room: RoomInput!
}

"""
Autogenerated return type of CreateRoom.
"""
type CreateRoomPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  room: Room!
}

"""
Autogenerated input type of CreateRun
"""
input CreateRunInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID
  run: RunInput!
}

"""
Autogenerated return type of CreateRun.
"""
type CreateRunPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  run: Run!
}

"""
Autogenerated input type of CreateSignupRankedChoice
"""
input CreateSignupRankedChoiceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The bucket key to queue a signup ranked choice in, or null to queue a no-preference choice
  """
  requested_bucket_key: String

  """
  The ID of the run to queue a signup ranked choice for
  """
  targetRunId: ID
}

"""
Autogenerated return type of CreateSignupRankedChoice.
"""
type CreateSignupRankedChoicePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SignupRankedChoice that has been created
  """
  signup_ranked_choice: SignupRankedChoice!
}

"""
Autogenerated input type of CreateSignupRequest
"""
input CreateSignupRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  replaceSignupId: ID
  requested_bucket_key: String
  targetRunId: ID
}

"""
Autogenerated return type of CreateSignupRequest.
"""
type CreateSignupRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signup_request: SignupRequest!
}

"""
Autogenerated input type of CreateSignupRound
"""
input CreateSignupRoundInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Convention to create a SignupRound in
  """
  conventionId: ID!

  """
  The data for the SignupRound to create
  """
  signupRound: SignupRoundInput
}

"""
Autogenerated return type of CreateSignupRound.
"""
type CreateSignupRoundPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SignupRound that has been created
  """
  signup_round: SignupRound!
}

"""
Autogenerated input type of CreateStaffPosition
"""
input CreateStaffPositionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  staff_position: StaffPositionInput!
}

"""
Autogenerated return type of CreateStaffPosition.
"""
type CreateStaffPositionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  staff_position: StaffPosition!
}

"""
Autogenerated input type of CreateTeamMember
"""
input CreateTeamMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID
  provideTicketTypeId: ID
  team_member: TeamMemberInput!
  userConProfileId: ID
}

"""
Autogenerated return type of CreateTeamMember.
"""
type CreateTeamMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  converted_signups: [Signup!]!
  move_results: [SignupMoveResult!]!
  team_member: TeamMember!
  ticket: Ticket
}

"""
Autogenerated input type of CreateTicket
"""
input CreateTicketInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  ticket: TicketInput!
  userConProfileId: ID
}

"""
Autogenerated return type of CreateTicket.
"""
type CreateTicketPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  ticket: Ticket!
}

"""
Autogenerated input type of CreateTicketType
"""
input CreateTicketTypeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID
  ticket_type: TicketTypeInput!
}

"""
Autogenerated return type of CreateTicketType.
"""
type CreateTicketTypePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  ticket_type: TicketType!
}

"""
Autogenerated input type of CreateUserActivityAlert
"""
input CreateUserActivityAlertInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  notification_destinations: [NotificationDestinationInput!]!
  user_activity_alert: UserActivityAlertInput!
}

"""
Autogenerated return type of CreateUserActivityAlert.
"""
type CreateUserActivityAlertPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user_activity_alert: UserActivityAlert!
}

"""
Autogenerated input type of CreateUserConProfile
"""
input CreateUserConProfileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID
  user_con_profile: UserConProfileInput!
}

"""
Autogenerated return type of CreateUserConProfile.
"""
type CreateUserConProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user_con_profile: UserConProfile!
}

"""
Autogenerated input type of CreateUserSignup
"""
input CreateUserSignupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  no_requested_bucket: Boolean
  requested_bucket_key: String
  runId: ID
  suppress_confirmation: Boolean
  suppress_notifications: Boolean
  userConProfileId: ID
}

"""
Autogenerated return type of CreateUserSignup.
"""
type CreateUserSignupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signup: Signup!
}

"""
Date in ISO8601 format
"""
scalar Date

"""
Autogenerated input type of DeleteCmsContentGroup
"""
input DeleteCmsContentGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteCmsContentGroup.
"""
type DeleteCmsContentGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_content_group: CmsContentGroup!
}

"""
Autogenerated input type of DeleteCmsFile
"""
input DeleteCmsFileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteCmsFile.
"""
type DeleteCmsFilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_file: CmsFile!
}

"""
Autogenerated input type of DeleteCmsGraphqlQuery
"""
input DeleteCmsGraphqlQueryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteCmsGraphqlQuery.
"""
type DeleteCmsGraphqlQueryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  query: CmsGraphqlQuery!
}

"""
Autogenerated input type of DeleteCmsLayout
"""
input DeleteCmsLayoutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteCmsLayout.
"""
type DeleteCmsLayoutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_layout: CmsLayout!
}

"""
Autogenerated input type of DeleteCmsNavigationItem
"""
input DeleteCmsNavigationItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteCmsNavigationItem.
"""
type DeleteCmsNavigationItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_navigation_item: CmsNavigationItem!
}

"""
Autogenerated input type of DeleteCmsPartial
"""
input DeleteCmsPartialInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteCmsPartial.
"""
type DeleteCmsPartialPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_partial: CmsPartial!
}

"""
Autogenerated input type of DeleteCmsVariable
"""
input DeleteCmsVariableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  key: String!
}

"""
Autogenerated return type of DeleteCmsVariable.
"""
type DeleteCmsVariablePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_variable: CmsVariable!
}

"""
Autogenerated input type of DeleteCouponApplication
"""
input DeleteCouponApplicationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteCouponApplication.
"""
type DeleteCouponApplicationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coupon_application: CouponApplication!
}

"""
Autogenerated input type of DeleteCoupon
"""
input DeleteCouponInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteCoupon.
"""
type DeleteCouponPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coupon: Coupon!
}

"""
Autogenerated input type of DeleteDepartment
"""
input DeleteDepartmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteDepartment.
"""
type DeleteDepartmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  department: Department!
}

"""
Autogenerated input type of DeleteEmailRoute
"""
input DeleteEmailRouteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteEmailRoute.
"""
type DeleteEmailRoutePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email_route: EmailRoute!
}

"""
Autogenerated input type of DeleteEventCategory
"""
input DeleteEventCategoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteEventCategory.
"""
type DeleteEventCategoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_category: EventCategory!
}

"""
Autogenerated input type of DeleteEventProposal
"""
input DeleteEventProposalInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteEventProposal.
"""
type DeleteEventProposalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_proposal: EventProposal!
}

"""
Autogenerated input type of DeleteForm
"""
input DeleteFormInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated input type of DeleteFormItem
"""
input DeleteFormItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteFormItem.
"""
type DeleteFormItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteForm.
"""
type DeleteFormPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form: Form!
}

"""
Autogenerated input type of DeleteFormSection
"""
input DeleteFormSectionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteFormSection.
"""
type DeleteFormSectionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteMaximumEventProvidedTicketsOverride
"""
input DeleteMaximumEventProvidedTicketsOverrideInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteMaximumEventProvidedTicketsOverride.
"""
type DeleteMaximumEventProvidedTicketsOverridePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  maximum_event_provided_tickets_override: MaximumEventProvidedTicketsOverride!
}

"""
Autogenerated input type of DeleteOrderEntry
"""
input DeleteOrderEntryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteOrderEntry.
"""
type DeleteOrderEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order_entry: OrderEntry!
}

"""
Autogenerated input type of DeleteOrganizationRole
"""
input DeleteOrganizationRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteOrganizationRole.
"""
type DeleteOrganizationRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeletePage
"""
input DeletePageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeletePage.
"""
type DeletePagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  page: Page!
}

"""
Autogenerated input type of DeleteProduct
"""
input DeleteProductInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteProduct.
"""
type DeleteProductPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  product: Product!
}

"""
Autogenerated input type of DeleteRankedChoiceUserConstraint
"""
input DeleteRankedChoiceUserConstraintInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the constraint to delete.
  """
  id: ID!
}

"""
Autogenerated return type of DeleteRankedChoiceUserConstraint.
"""
type DeleteRankedChoiceUserConstraintPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The constraint that has just been deleted.
  """
  ranked_choice_user_constraint: RankedChoiceUserConstraint!
}

"""
Autogenerated input type of DeleteRoom
"""
input DeleteRoomInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteRoom.
"""
type DeleteRoomPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  room: Room!
}

"""
Autogenerated input type of DeleteRun
"""
input DeleteRunInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteRun.
"""
type DeleteRunPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  run: Run!
}

"""
Autogenerated input type of DeleteSignupRankedChoice
"""
input DeleteSignupRankedChoiceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the SignupRankedChoice to delete
  """
  id: ID!
}

"""
Autogenerated return type of DeleteSignupRankedChoice.
"""
type DeleteSignupRankedChoicePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SignupRankedChoice that has been deleted
  """
  signup_ranked_choice: SignupRankedChoice!
}

"""
Autogenerated input type of DeleteSignupRound
"""
input DeleteSignupRoundInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the SignupRound to delete
  """
  id: ID!
}

"""
Autogenerated return type of DeleteSignupRound.
"""
type DeleteSignupRoundPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SignupRound that has been deleted
  """
  signup_round: SignupRound!
}

"""
Autogenerated input type of DeleteStaffPosition
"""
input DeleteStaffPositionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteStaffPosition.
"""
type DeleteStaffPositionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  staff_position: StaffPosition!
}

"""
Autogenerated input type of DeleteTeamMember
"""
input DeleteTeamMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteTeamMember.
"""
type DeleteTeamMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  team_member: TeamMember!
}

"""
Autogenerated input type of DeleteTicket
"""
input DeleteTicketInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  refund: Boolean
}

"""
Autogenerated return type of DeleteTicket.
"""
type DeleteTicketPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  ticket: Ticket!
}

"""
Autogenerated input type of DeleteTicketType
"""
input DeleteTicketTypeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteTicketType.
"""
type DeleteTicketTypePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  ticket_type: TicketType!
}

"""
Autogenerated input type of DeleteUserActivityAlert
"""
input DeleteUserActivityAlertInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteUserActivityAlert.
"""
type DeleteUserActivityAlertPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user_activity_alert: UserActivityAlert!
}

"""
Autogenerated input type of DeleteUserConProfile
"""
input DeleteUserConProfileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteUserConProfile.
"""
type DeleteUserConProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user_con_profile: UserConProfile!
}

type Department {
  event_categories: [EventCategory!]!
  id: ID!
  name: String!
  proposal_description: String
}

input DepartmentInput {
  name: String
  proposal_description: String
}

"""
Autogenerated input type of DropEvent
"""
input DropEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DropEvent.
"""
type DropEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event!
}

enum EmailMode {
  """
  Forward received emails to staff positions as configured
  """
  forward

  """
  Forward all received staff emails to catch-all staff position
  """
  staff_emails_to_catch_all
}

type EmailRoute {
  forward_addresses: [String!]
  id: ID!
  receiver_address: String!
}

input EmailRouteFiltersInput {
  forward_addresses: String
  receiver_address: String
}

input EmailRouteInput {
  forward_addresses: [String!]
  receiver_address: String
}

type EmailRoutesPagination implements PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!
  entries: [EmailRoute!]!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

type Event {
  admin_notes: String
  age_restrictions: String @deprecated(reason: "Has not worked correctly in a long time.  Please use form_response_attrs or form_response_attrs_json.")
  author: String
  can_play_concurrently: Boolean!
  con_mail_destination: String
  content_warnings: String
  convention: Convention!
  created_at: Date
  current_user_form_item_viewer_role: FormItemRole!
  current_user_form_item_writer_role: FormItemRole!
  description: String
  description_html: String
  email: String
  event_category: EventCategory!
  form: Form
  form_response_attrs_json(itemIdentifiers: [String!]): Json
  form_response_attrs_json_with_rendered_markdown(itemIdentifiers: [String!]): Json
  form_response_changes: [FormResponseChange!]!
  id: ID!
  images: [ActiveStorageAttachment!]!
  length_seconds: Int!
  maximum_event_provided_tickets_overrides: [MaximumEventProvidedTicketsOverride!]!
  my_rating: Int
  organization: String
  participant_communications: String
  private_signup_list: Boolean
  provided_tickets: [Ticket!]!
  registration_policy: RegistrationPolicy
  run(id: ID): Run!
  runs(excludeConflicts: Boolean @deprecated(reason: "This parameter hasn't actually worked for a long time"), finish: Date, start: Date): [Run!]!
  short_blurb: String
  short_blurb_html: String
  slots_limited: Boolean
  status: String
  team_members: [TeamMember!]!
  ticket_types: [TicketType!]!
  title: String
  total_slots: Int
  url: String
}

type EventCategory {
  can_provide_tickets: Boolean!
  convention: Convention!
  default_color: String
  department: Department
  event_form: Form!
  event_proposal_form: Form
  events_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: EventFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): EventsPagination!
  full_color: String
  id: ID!
  name: String!
  proposable: Boolean!
  proposal_description: String
  scheduling_ui: SchedulingUi!
  signed_up_color: String
  teamMemberNamePlural: String!
  team_member_name: String!
}

input EventCategoryInput {
  can_provide_tickets: Boolean
  default_color: String
  departmentId: ID
  eventFormId: ID
  eventProposalFormId: ID
  full_color: String
  name: String
  proposal_description: String
  scheduling_ui: SchedulingUi
  signed_up_color: String
  team_member_name: String
}

input EventFiltersInput {
  category: [Int]
  form_items: JSON
  my_rating: [Int!]
  title: String
  title_prefix: String
}

input EventInput {
  addImageBlobIds: [ID!]
  eventCategoryId: ID
  form_response_attrs_json: String
  removeImageBlobIds: [ID!]
}

type EventProposal {
  admin_notes: String
  convention: Convention!
  created_at: Date!
  current_user_form_item_viewer_role: FormItemRole!
  current_user_form_item_writer_role: FormItemRole!
  event: Event
  event_category: EventCategory!
  form: Form
  form_response_attrs_json(itemIdentifiers: [String!]): Json
  form_response_attrs_json_with_rendered_markdown(itemIdentifiers: [String!]): Json
  form_response_changes: [FormResponseChange!]!
  id: ID!
  images: [ActiveStorageAttachment!]!
  length_seconds: Int
  owner: UserConProfile!
  registration_policy: RegistrationPolicy
  status: String!
  submitted_at: Date
  title: String
  updated_at: Date!
}

input EventProposalFiltersInput {
  event_category: [Int]
  owner: String
  status: [String]
  title: String
}

input EventProposalInput {
  addImageBlobIds: [ID!]
  form_response_attrs_json: String
  removeImageBlobIds: [ID!]
}

type EventProposalsPagination implements PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!
  entries: [EventProposal!]!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

type EventProvidedTicketList {
  provided_by_event: Event!
  tickets: [Ticket!]!
}

type EventWithChoiceCounts {
  choice_counts: [ChoiceCount!]!
  event: Event!
}

type EventsPagination implements PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!
  entries: [Event!]!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

"""
Autogenerated input type of ForceConfirmSignup
"""
input ForceConfirmSignupInput {
  bucket_key: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of ForceConfirmSignup.
"""
type ForceConfirmSignupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signup: Signup!
}

type Form {
  event_categories: [EventCategory!]!
  export_json: Json!
  form_section(
    """
    The ID of the form section to find.
    """
    id: ID!
  ): FormSection!
  form_sections: [FormSection!]!
  form_type: FormType!
  id: ID!
  proposal_event_categories: [EventCategory!]!
  title: String!
  user_con_profile_conventions: [Convention!]!
}

input FormInput {
  title: String
}

type FormItem {
  admin_description: String
  default_value: Json
  expose_in: [FormItemExposeIn!]
  form_section: FormSection!
  id: ID!
  identifier: String
  item_type: String!
  position: Int!
  properties: Json!
  public_description: String
  rendered_properties: Json!
  visibility: FormItemRole!
  writeability: FormItemRole!
}

enum FormItemExposeIn {
  event_catalog
  schedule_popup
}

input FormItemInput {
  admin_description: String
  default_value: Json
  expose_in: [FormItemExposeIn!]
  identifier: String
  item_type: String
  properties: Json
  public_description: String
  visibility: FormItemRole
  writeability: FormItemRole
}

enum FormItemRole {
  admin
  all_profiles_basic_access
  confirmed_attendee
  normal
  team_member
}

type FormResponseChange {
  compacted: Boolean!
  created_at: Date!
  field_identifier: String!
  new_value: Json
  notified_at: Date
  previous_value: Json
  updated_at: Date!
  user_con_profile: UserConProfile!
}

type FormSection {
  form: Form!
  form_items: [FormItem!]!
  id: ID!
  position: Int!

  """
  Given a FormItemInput, returns a preview version of that form item within this section. This
  does not actually save the form item. This is mostly useful because of the
  `rendered_properties` field inside FormItem, which lets clients retrieve
  a rendered HTML version of the Liquid-enabled properties of the form item.
  """
  preview_form_item(
    """
    The fields to use for constructing the form item to preview.
    """
    formItem: FormItemInput!
  ): FormItem!
  title: String
}

input FormSectionInput {
  title: String
}

enum FormType {
  """
  Event form
  """
  event

  """
  Event proposal form
  """
  event_proposal

  """
  User profile form
  """
  user_con_profile
}

type GroupedSignupCount {
  bucket_key: String
  count: Int!
  counted: Boolean!
  requested_bucket_key: String
  state: SignupState!
  team_member: Boolean!
}

"""
Represents untyped JSON
"""
scalar JSON

"""
An arbitrary object, serialized as JSON
"""
scalar Json

type LiquidAssign {
  cms_variable_value_json: String
  drop_class_name: String!
  name: String!
}

type MailingLists {
  event_proposers: MailingListsResult!
  team_members: MailingListsResult!
  ticketed_attendees: MailingListsResult!
  users_with_pending_bio: MailingListsResult!
  waitlists: [MailingListsWaitlistsResult!]!
  whos_free(finish: Date!, start: Date!): MailingListsResult!
}

type MailingListsResult {
  emails: [ContactEmail!]!
  metadata_fields: [String!]!
}

type MailingListsWaitlistsResult {
  emails: [ContactEmail!]!
  metadata_fields: [String!]!
  run: Run!
}

"""
Autogenerated input type of MarkOrderPaid
"""
input MarkOrderPaidInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of MarkOrderPaid.
"""
type MarkOrderPaidPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order: Order!
}

type MaximumEventProvidedTicketsOverride {
  event: Event!
  id: ID!
  override_value: Int!
  ticket_type: TicketType!
}

"""
Autogenerated input type of MergeUsers
"""
input MergeUsersInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user IDs to merge.
  """
  userIds: [ID!]
  winningUserConProfiles: [WinningUserConProfileInput!]!
  winningUserId: ID
}

"""
Autogenerated return type of MergeUsers.
"""
type MergeUsersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type Money {
  currency_code: String!
  fractional: Int!
}

input MoneyInput {
  currency_code: String!
  fractional: Int!
}

"""
Autogenerated input type of MoveFormItem
"""
input MoveFormItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  destination_index: Int
  formSectionId: ID
  id: ID
}

"""
Autogenerated return type of MoveFormItem.
"""
type MoveFormItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form_item: FormItem!
  form_section: FormSection!
}

"""
Autogenerated input type of MoveFormSection
"""
input MoveFormSectionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  destination_index: Int!
  id: ID
}

"""
Autogenerated return type of MoveFormSection.
"""
type MoveFormSectionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form: Form!
  form_section: FormSection!
}

type Mutation {
  acceptClickwrapAgreement(
    """
    Parameters for AcceptClickwrapAgreement
    """
    input: AcceptClickwrapAgreementInput!
  ): AcceptClickwrapAgreementPayload!
  acceptSignupRequest(
    """
    Parameters for AcceptSignupRequest
    """
    input: AcceptSignupRequestInput!
  ): AcceptSignupRequestPayload!
  addOrderEntryToCurrentPendingOrder(
    """
    Parameters for AddOrderEntryToCurrentPendingOrder
    """
    input: AddOrderEntryToCurrentPendingOrderInput!
  ): AddOrderEntryToCurrentPendingOrderPayload!
  attachImageToEvent(
    """
    Parameters for AttachImageToEvent
    """
    input: AttachImageToEventInput!
  ): AttachImageToEventPayload!
  attachImageToEventProposal(
    """
    Parameters for AttachImageToEventProposal
    """
    input: AttachImageToEventProposalInput!
  ): AttachImageToEventProposalPayload!
  cancelOrder(
    """
    Parameters for CancelOrder
    """
    input: CancelOrderInput!
  ): CancelOrderPayload!
  convertTicketToEventProvided(
    """
    Parameters for ConvertTicketToEventProvided
    """
    input: ConvertTicketToEventProvidedInput!
  ): ConvertTicketToEventProvidedPayload!
  createCmsContentGroup(
    """
    Parameters for CreateCmsContentGroup
    """
    input: CreateCmsContentGroupInput!
  ): CreateCmsContentGroupPayload!
  createCmsFile(
    """
    Parameters for CreateCmsFile
    """
    input: CreateCmsFileInput!
  ): CreateCmsFilePayload!
  createCmsGraphqlQuery(
    """
    Parameters for CreateCmsGraphqlQuery
    """
    input: CreateCmsGraphqlQueryInput!
  ): CreateCmsGraphqlQueryPayload!
  createCmsLayout(
    """
    Parameters for CreateCmsLayout
    """
    input: CreateCmsLayoutInput!
  ): CreateCmsLayoutPayload!
  createCmsNavigationItem(
    """
    Parameters for CreateCmsNavigationItem
    """
    input: CreateCmsNavigationItemInput!
  ): CreateCmsNavigationItemPayload!
  createCmsPartial(
    """
    Parameters for CreateCmsPartial
    """
    input: CreateCmsPartialInput!
  ): CreateCmsPartialPayload!
  createConvention(
    """
    Parameters for CreateConvention
    """
    input: CreateConventionInput!
  ): CreateConventionPayload!
  createConventionStripeAccount(
    """
    Parameters for CreateConventionStripeAccount
    """
    input: CreateConventionStripeAccountInput!
  ): CreateConventionStripeAccountPayload!
  createCoupon(
    """
    Parameters for CreateCoupon
    """
    input: CreateCouponInput!
  ): CreateCouponPayload!
  createCouponApplication(
    """
    Parameters for CreateCouponApplication
    """
    input: CreateCouponApplicationInput!
  ): CreateCouponApplicationPayload!
  createDepartment(
    """
    Parameters for CreateDepartment
    """
    input: CreateDepartmentInput!
  ): CreateDepartmentPayload!
  createEmailRoute(
    """
    Parameters for CreateEmailRoute
    """
    input: CreateEmailRouteInput!
  ): CreateEmailRoutePayload!
  createEvent(
    """
    Parameters for CreateEvent
    """
    input: CreateEventInput!
  ): CreateEventPayload!
  createEventCategory(
    """
    Parameters for CreateEventCategory
    """
    input: CreateEventCategoryInput!
  ): CreateEventCategoryPayload!
  createEventProposal(
    """
    Parameters for CreateEventProposal
    """
    input: CreateEventProposalInput!
  ): CreateEventProposalPayload!
  createFillerEvent(
    """
    Parameters for CreateFillerEvent
    """
    input: CreateFillerEventInput!
  ): CreateFillerEventPayload!

  """
  Create a new form in a convention.
  """
  createForm(
    """
    Parameters for CreateForm
    """
    input: CreateFormInput!
  ): CreateFormPayload!
  createFormItem(
    """
    Parameters for CreateFormItem
    """
    input: CreateFormItemInput!
  ): CreateFormItemPayload!
  createFormSection(
    """
    Parameters for CreateFormSection
    """
    input: CreateFormSectionInput!
  ): CreateFormSectionPayload!
  createFormWithJSON(
    """
    Parameters for CreateFormWithJSON
    """
    input: CreateFormWithJSONInput!
  ): CreateFormWithJSONPayload!
  createMaximumEventProvidedTicketsOverride(
    """
    Parameters for CreateMaximumEventProvidedTicketsOverride
    """
    input: CreateMaximumEventProvidedTicketsOverrideInput!
  ): CreateMaximumEventProvidedTicketsOverridePayload!
  createMultipleRuns(
    """
    Parameters for CreateMultipleRuns
    """
    input: CreateMultipleRunsInput!
  ): CreateMultipleRunsPayload!
  createMySignup(
    """
    Parameters for CreateMySignup
    """
    input: CreateMySignupInput!
  ): CreateMySignupPayload!
  createOrder(
    """
    Parameters for CreateOrder
    """
    input: CreateOrderInput!
  ): CreateOrderPayload!
  createOrderEntry(
    """
    Parameters for CreateOrderEntry
    """
    input: CreateOrderEntryInput!
  ): CreateOrderEntryPayload!
  createOrganizationRole(
    """
    Parameters for CreateOrganizationRole
    """
    input: CreateOrganizationRoleInput!
  ): CreateOrganizationRolePayload!
  createPage(
    """
    Parameters for CreatePage
    """
    input: CreatePageInput!
  ): CreatePagePayload!
  createProduct(
    """
    Parameters for CreateProduct
    """
    input: CreateProductInput!
  ): CreateProductPayload!

  """
  Create a new RankedChoiceUserConstraint
  """
  createRankedChoiceUserConstraint(
    """
    Parameters for CreateRankedChoiceUserConstraint
    """
    input: CreateRankedChoiceUserConstraintInput!
  ): CreateRankedChoiceUserConstraintPayload!
  createRoom(
    """
    Parameters for CreateRoom
    """
    input: CreateRoomInput!
  ): CreateRoomPayload!
  createRun(
    """
    Parameters for CreateRun
    """
    input: CreateRunInput!
  ): CreateRunPayload!

  """
  Create a new SignupRankedChoice in a user's signup queue
  """
  createSignupRankedChoice(
    """
    Parameters for CreateSignupRankedChoice
    """
    input: CreateSignupRankedChoiceInput!
  ): CreateSignupRankedChoicePayload!
  createSignupRequest(
    """
    Parameters for CreateSignupRequest
    """
    input: CreateSignupRequestInput!
  ): CreateSignupRequestPayload!

  """
  Create a new SignupRound in a convention
  """
  createSignupRound(
    """
    Parameters for CreateSignupRound
    """
    input: CreateSignupRoundInput!
  ): CreateSignupRoundPayload!
  createStaffPosition(
    """
    Parameters for CreateStaffPosition
    """
    input: CreateStaffPositionInput!
  ): CreateStaffPositionPayload!
  createTeamMember(
    """
    Parameters for CreateTeamMember
    """
    input: CreateTeamMemberInput!
  ): CreateTeamMemberPayload!
  createTicket(
    """
    Parameters for CreateTicket
    """
    input: CreateTicketInput!
  ): CreateTicketPayload!
  createTicketType(
    """
    Parameters for CreateTicketType
    """
    input: CreateTicketTypeInput!
  ): CreateTicketTypePayload!
  createUserActivityAlert(
    """
    Parameters for CreateUserActivityAlert
    """
    input: CreateUserActivityAlertInput!
  ): CreateUserActivityAlertPayload!
  createUserConProfile(
    """
    Parameters for CreateUserConProfile
    """
    input: CreateUserConProfileInput!
  ): CreateUserConProfilePayload!
  createUserSignup(
    """
    Parameters for CreateUserSignup
    """
    input: CreateUserSignupInput!
  ): CreateUserSignupPayload!
  deleteCmsContentGroup(
    """
    Parameters for DeleteCmsContentGroup
    """
    input: DeleteCmsContentGroupInput!
  ): DeleteCmsContentGroupPayload!
  deleteCmsFile(
    """
    Parameters for DeleteCmsFile
    """
    input: DeleteCmsFileInput!
  ): DeleteCmsFilePayload!
  deleteCmsGraphqlQuery(
    """
    Parameters for DeleteCmsGraphqlQuery
    """
    input: DeleteCmsGraphqlQueryInput!
  ): DeleteCmsGraphqlQueryPayload!
  deleteCmsLayout(
    """
    Parameters for DeleteCmsLayout
    """
    input: DeleteCmsLayoutInput!
  ): DeleteCmsLayoutPayload!
  deleteCmsNavigationItem(
    """
    Parameters for DeleteCmsNavigationItem
    """
    input: DeleteCmsNavigationItemInput!
  ): DeleteCmsNavigationItemPayload!
  deleteCmsPartial(
    """
    Parameters for DeleteCmsPartial
    """
    input: DeleteCmsPartialInput!
  ): DeleteCmsPartialPayload!
  deleteCmsVariable(
    """
    Parameters for DeleteCmsVariable
    """
    input: DeleteCmsVariableInput!
  ): DeleteCmsVariablePayload!
  deleteCoupon(
    """
    Parameters for DeleteCoupon
    """
    input: DeleteCouponInput!
  ): DeleteCouponPayload!
  deleteCouponApplication(
    """
    Parameters for DeleteCouponApplication
    """
    input: DeleteCouponApplicationInput!
  ): DeleteCouponApplicationPayload!
  deleteDepartment(
    """
    Parameters for DeleteDepartment
    """
    input: DeleteDepartmentInput!
  ): DeleteDepartmentPayload!
  deleteEmailRoute(
    """
    Parameters for DeleteEmailRoute
    """
    input: DeleteEmailRouteInput!
  ): DeleteEmailRoutePayload!
  deleteEventCategory(
    """
    Parameters for DeleteEventCategory
    """
    input: DeleteEventCategoryInput!
  ): DeleteEventCategoryPayload!
  deleteEventProposal(
    """
    Parameters for DeleteEventProposal
    """
    input: DeleteEventProposalInput!
  ): DeleteEventProposalPayload!
  deleteForm(
    """
    Parameters for DeleteForm
    """
    input: DeleteFormInput!
  ): DeleteFormPayload!
  deleteFormItem(
    """
    Parameters for DeleteFormItem
    """
    input: DeleteFormItemInput!
  ): DeleteFormItemPayload!
  deleteFormSection(
    """
    Parameters for DeleteFormSection
    """
    input: DeleteFormSectionInput!
  ): DeleteFormSectionPayload!
  deleteMaximumEventProvidedTicketsOverride(
    """
    Parameters for DeleteMaximumEventProvidedTicketsOverride
    """
    input: DeleteMaximumEventProvidedTicketsOverrideInput!
  ): DeleteMaximumEventProvidedTicketsOverridePayload!
  deleteOrderEntry(
    """
    Parameters for DeleteOrderEntry
    """
    input: DeleteOrderEntryInput!
  ): DeleteOrderEntryPayload!
  deleteOrganizationRole(
    """
    Parameters for DeleteOrganizationRole
    """
    input: DeleteOrganizationRoleInput!
  ): DeleteOrganizationRolePayload!
  deletePage(
    """
    Parameters for DeletePage
    """
    input: DeletePageInput!
  ): DeletePagePayload!
  deleteProduct(
    """
    Parameters for DeleteProduct
    """
    input: DeleteProductInput!
  ): DeleteProductPayload!

  """
  Delete a RankedChoiceUserConstraint from a user's profile.
  """
  deleteRankedChoiceUserConstraint(
    """
    Parameters for DeleteRankedChoiceUserConstraint
    """
    input: DeleteRankedChoiceUserConstraintInput!
  ): DeleteRankedChoiceUserConstraintPayload!
  deleteRoom(
    """
    Parameters for DeleteRoom
    """
    input: DeleteRoomInput!
  ): DeleteRoomPayload!
  deleteRun(
    """
    Parameters for DeleteRun
    """
    input: DeleteRunInput!
  ): DeleteRunPayload!

  """
  Deletes a SignupRankedChoice from a user's signup queue
  """
  deleteSignupRankedChoice(
    """
    Parameters for DeleteSignupRankedChoice
    """
    input: DeleteSignupRankedChoiceInput!
  ): DeleteSignupRankedChoicePayload!

  """
  Deletes a SignupRound from a convention
  """
  deleteSignupRound(
    """
    Parameters for DeleteSignupRound
    """
    input: DeleteSignupRoundInput!
  ): DeleteSignupRoundPayload!
  deleteStaffPosition(
    """
    Parameters for DeleteStaffPosition
    """
    input: DeleteStaffPositionInput!
  ): DeleteStaffPositionPayload!
  deleteTeamMember(
    """
    Parameters for DeleteTeamMember
    """
    input: DeleteTeamMemberInput!
  ): DeleteTeamMemberPayload!
  deleteTicket(
    """
    Parameters for DeleteTicket
    """
    input: DeleteTicketInput!
  ): DeleteTicketPayload!
  deleteTicketType(
    """
    Parameters for DeleteTicketType
    """
    input: DeleteTicketTypeInput!
  ): DeleteTicketTypePayload!
  deleteUserActivityAlert(
    """
    Parameters for DeleteUserActivityAlert
    """
    input: DeleteUserActivityAlertInput!
  ): DeleteUserActivityAlertPayload!
  deleteUserConProfile(
    """
    Parameters for DeleteUserConProfile
    """
    input: DeleteUserConProfileInput!
  ): DeleteUserConProfilePayload!
  dropEvent(
    """
    Parameters for DropEvent
    """
    input: DropEventInput!
  ): DropEventPayload!
  forceConfirmSignup(
    """
    Parameters for ForceConfirmSignup
    """
    input: ForceConfirmSignupInput!
  ): ForceConfirmSignupPayload!
  markOrderPaid(
    """
    Parameters for MarkOrderPaid
    """
    input: MarkOrderPaidInput!
  ): MarkOrderPaidPayload!
  mergeUsers(
    """
    Parameters for MergeUsers
    """
    input: MergeUsersInput!
  ): MergeUsersPayload!
  moveFormItem(
    """
    Parameters for MoveFormItem
    """
    input: MoveFormItemInput!
  ): MoveFormItemPayload!
  moveFormSection(
    """
    Parameters for MoveFormSection
    """
    input: MoveFormSectionInput!
  ): MoveFormSectionPayload!
  provideEventTicket(
    """
    Parameters for ProvideEventTicket
    """
    input: ProvideEventTicketInput!
  ): ProvideEventTicketPayload!
  rateEvent(
    """
    Parameters for RateEvent
    """
    input: RateEventInput!
  ): RateEventPayload!
  rejectSignupRequest(
    """
    Parameters for RejectSignupRequest
    """
    input: RejectSignupRequestInput!
  ): RejectSignupRequestPayload!
  renameCmsFile(
    """
    Parameters for RenameCmsFile
    """
    input: RenameCmsFileInput!
  ): RenameCmsFilePayload!

  """
  In a moderated-signup convention with ranked-choice signups, this operation can be used to undo whatever signup
  requests from a round haven't yet been accepted or rejected, and rerun the round from wherever that leaves it.  Any
  undone signup requests will be moved back to the top of the user's queue, so the algorithm will attempt to re-place
  them in that event if possible.
  """
  rerunModeratedRankedChoiceSignupRound(
    """
    Parameters for RerunModeratedRankedChoiceSignupRound
    """
    input: RerunModeratedRankedChoiceSignupRoundInput!
  ): RerunModeratedRankedChoiceSignupRoundPayload!
  restoreDroppedEvent(
    """
    Parameters for RestoreDroppedEvent
    """
    input: RestoreDroppedEventInput!
  ): RestoreDroppedEventPayload!
  revokeAuthorizedApplication(
    """
    Parameters for RevokeAuthorizedApplication
    """
    input: RevokeAuthorizedApplicationInput!
  ): RevokeAuthorizedApplicationPayload!

  """
  Sends a preview of a given notification template to a given user.
  """
  sendNotificationPreview(
    """
    Parameters for SendNotificationPreview
    """
    input: SendNotificationPreviewInput!
  ): SendNotificationPreviewPayload!
  setCmsVariable(
    """
    Parameters for SetCmsVariable
    """
    input: SetCmsVariableInput!
  ): SetCmsVariablePayload!
  setConventionCanceled(
    """
    Parameters for SetConventionCanceled
    """
    input: SetConventionCanceledInput!
  ): SetConventionCanceledPayload!
  sortCmsNavigationItems(
    """
    Parameters for SortCmsNavigationItems
    """
    input: SortCmsNavigationItemsInput!
  ): SortCmsNavigationItemsPayload!
  submitEventProposal(
    """
    Parameters for SubmitEventProposal
    """
    input: SubmitEventProposalInput!
  ): SubmitEventProposalPayload!

  """
  Submit an order.  This triggers payment, unless the order is free.
  """
  submitOrder(
    """
    Parameters for SubmitOrder
    """
    input: SubmitOrderInput!
  ): SubmitOrderPayload!
  transitionEventProposal(
    """
    Parameters for TransitionEventProposal
    """
    input: TransitionEventProposalInput!
  ): TransitionEventProposalPayload!
  updateCmsContentGroup(
    """
    Parameters for UpdateCmsContentGroup
    """
    input: UpdateCmsContentGroupInput!
  ): UpdateCmsContentGroupPayload!
  updateCmsGraphqlQuery(
    """
    Parameters for UpdateCmsGraphqlQuery
    """
    input: UpdateCmsGraphqlQueryInput!
  ): UpdateCmsGraphqlQueryPayload!
  updateCmsLayout(
    """
    Parameters for UpdateCmsLayout
    """
    input: UpdateCmsLayoutInput!
  ): UpdateCmsLayoutPayload!
  updateCmsNavigationItem(
    """
    Parameters for UpdateCmsNavigationItem
    """
    input: UpdateCmsNavigationItemInput!
  ): UpdateCmsNavigationItemPayload!
  updateCmsPartial(
    """
    Parameters for UpdateCmsPartial
    """
    input: UpdateCmsPartialInput!
  ): UpdateCmsPartialPayload!
  updateConvention(
    """
    Parameters for UpdateConvention
    """
    input: UpdateConventionInput!
  ): UpdateConventionPayload!
  updateCoupon(
    """
    Parameters for UpdateCoupon
    """
    input: UpdateCouponInput!
  ): UpdateCouponPayload!
  updateDepartment(
    """
    Parameters for UpdateDepartment
    """
    input: UpdateDepartmentInput!
  ): UpdateDepartmentPayload!
  updateEmailRoute(
    """
    Parameters for UpdateEmailRoute
    """
    input: UpdateEmailRouteInput!
  ): UpdateEmailRoutePayload!
  updateEvent(
    """
    Parameters for UpdateEvent
    """
    input: UpdateEventInput!
  ): UpdateEventPayload!
  updateEventAdminNotes(
    """
    Parameters for UpdateEventAdminNotes
    """
    input: UpdateEventAdminNotesInput!
  ): UpdateEventAdminNotesPayload!
  updateEventCategory(
    """
    Parameters for UpdateEventCategory
    """
    input: UpdateEventCategoryInput!
  ): UpdateEventCategoryPayload!
  updateEventProposal(
    """
    Parameters for UpdateEventProposal
    """
    input: UpdateEventProposalInput!
  ): UpdateEventProposalPayload!
  updateEventProposalAdminNotes(
    """
    Parameters for UpdateEventProposalAdminNotes
    """
    input: UpdateEventProposalAdminNotesInput!
  ): UpdateEventProposalAdminNotesPayload!
  updateForm(
    """
    Parameters for UpdateForm
    """
    input: UpdateFormInput!
  ): UpdateFormPayload!
  updateFormItem(
    """
    Parameters for UpdateFormItem
    """
    input: UpdateFormItemInput!
  ): UpdateFormItemPayload!
  updateFormSection(
    """
    Parameters for UpdateFormSection
    """
    input: UpdateFormSectionInput!
  ): UpdateFormSectionPayload!
  updateFormWithJSON(
    """
    Parameters for UpdateFormWithJSON
    """
    input: UpdateFormWithJSONInput!
  ): UpdateFormWithJSONPayload!
  updateMaximumEventProvidedTicketsOverride(
    """
    Parameters for UpdateMaximumEventProvidedTicketsOverride
    """
    input: UpdateMaximumEventProvidedTicketsOverrideInput!
  ): UpdateMaximumEventProvidedTicketsOverridePayload!
  updateNotificationTemplate(
    """
    Parameters for UpdateNotificationTemplate
    """
    input: UpdateNotificationTemplateInput!
  ): UpdateNotificationTemplatePayload!
  updateOrder(
    """
    Parameters for UpdateOrder
    """
    input: UpdateOrderInput!
  ): UpdateOrderPayload!
  updateOrderEntry(
    """
    Parameters for UpdateOrderEntry
    """
    input: UpdateOrderEntryInput!
  ): UpdateOrderEntryPayload!
  updateOrganizationRole(
    """
    Parameters for UpdateOrganizationRole
    """
    input: UpdateOrganizationRoleInput!
  ): UpdateOrganizationRolePayload!
  updatePage(
    """
    Parameters for UpdatePage
    """
    input: UpdatePageInput!
  ): UpdatePagePayload!
  updateProduct(
    """
    Parameters for UpdateProduct
    """
    input: UpdateProductInput!
  ): UpdateProductPayload!

  """
  Update a RankedChoiceUserConstraint by ID.
  """
  updateRankedChoiceUserConstraint(
    """
    Parameters for UpdateRankedChoiceUserConstraint
    """
    input: UpdateRankedChoiceUserConstraintInput!
  ): UpdateRankedChoiceUserConstraintPayload!
  updateRoom(
    """
    Parameters for UpdateRoom
    """
    input: UpdateRoomInput!
  ): UpdateRoomPayload!
  updateRootSite(
    """
    Parameters for UpdateRootSite
    """
    input: UpdateRootSiteInput!
  ): UpdateRootSitePayload!
  updateRun(
    """
    Parameters for UpdateRun
    """
    input: UpdateRunInput!
  ): UpdateRunPayload!
  updateSignupBucket(
    """
    Parameters for UpdateSignupBucket
    """
    input: UpdateSignupBucketInput!
  ): UpdateSignupBucketPayload!
  updateSignupCounted(
    """
    Parameters for UpdateSignupCounted
    """
    input: UpdateSignupCountedInput!
  ): UpdateSignupCountedPayload!

  """
  Change the priority of a SignupRankedChoice in a user's queue
  """
  updateSignupRankedChoicePriority(
    """
    Parameters for UpdateSignupRankedChoicePriority
    """
    input: UpdateSignupRankedChoicePriorityInput!
  ): UpdateSignupRankedChoicePriorityPayload!

  """
  Modify an existing SignupRound
  """
  updateSignupRound(
    """
    Parameters for UpdateSignupRound
    """
    input: UpdateSignupRoundInput!
  ): UpdateSignupRoundPayload!
  updateStaffPosition(
    """
    Parameters for UpdateStaffPosition
    """
    input: UpdateStaffPositionInput!
  ): UpdateStaffPositionPayload!
  updateStaffPositionPermissions(
    """
    Parameters for UpdateStaffPositionPermissions
    """
    input: UpdateStaffPositionPermissionsInput!
  ): UpdateStaffPositionPermissionsPayload!
  updateTeamMember(
    """
    Parameters for UpdateTeamMember
    """
    input: UpdateTeamMemberInput!
  ): UpdateTeamMemberPayload!
  updateTicket(
    """
    Parameters for UpdateTicket
    """
    input: UpdateTicketInput!
  ): UpdateTicketPayload!
  updateTicketType(
    """
    Parameters for UpdateTicketType
    """
    input: UpdateTicketTypeInput!
  ): UpdateTicketTypePayload!
  updateUserActivityAlert(
    """
    Parameters for UpdateUserActivityAlert
    """
    input: UpdateUserActivityAlertInput!
  ): UpdateUserActivityAlertPayload!
  updateUserConProfile(
    """
    Parameters for UpdateUserConProfile
    """
    input: UpdateUserConProfileInput!
  ): UpdateUserConProfilePayload!
  withdrawAllUserConProfileSignups(
    """
    Parameters for WithdrawAllUserConProfileSignups
    """
    input: WithdrawAllUserConProfileSignupsInput!
  ): WithdrawAllUserConProfileSignupsPayload!
  withdrawMySignup(
    """
    Parameters for WithdrawMySignup
    """
    input: WithdrawMySignupInput!
  ): WithdrawMySignupPayload!
  withdrawSignupRequest(
    """
    Parameters for WithdrawSignupRequest
    """
    input: WithdrawSignupRequestInput!
  ): WithdrawSignupRequestPayload!
  withdrawUserSignup(
    """
    Parameters for WithdrawUserSignup
    """
    input: WithdrawUserSignupInput!
  ): WithdrawUserSignupPayload!
}

type NotificationDestination {
  id: ID!
  source: NotificationSource!
  staff_position: StaffPosition
  user_con_profile: UserConProfile
}

input NotificationDestinationInput {
  staffPositionId: ID
  userConProfileId: ID
}

union NotificationSource = UserActivityAlert

type NotificationTemplate {
  body_html: String
  body_sms: String
  body_text: String
  event_key: String!
  id: ID!
  subject: String
}

input NotificationTemplateInput {
  body_html: String
  body_sms: String
  body_text: String
  subject: String
}

type Order {
  charge_id: String
  coupon_applications: [CouponApplication!]!
  id: ID!
  order_entries: [OrderEntry!]!
  paid_at: Date
  payment_amount: Money

  """
  Generates a Stripe PaymentIntent for this order and returns the client secret from that
  PaymentIntent. This can be used to start a payment on the client side, for example using
  Apple Pay or Google Pay.
  """
  payment_intent_client_secret: String!
  payment_note: String
  status: OrderStatus!
  submitted_at: Date
  total_price: Money!
  total_price_before_discounts: Money!
  user_con_profile: UserConProfile!
}

type OrderEntry {
  describe_products: String!
  id: ID!
  order: Order!
  price: Money!
  price_per_item: Money!
  product: Product!
  product_variant: ProductVariant
  quantity: Int!
  run: Run
}

input OrderEntryInput {
  price_per_item: MoneyInput
  productId: ID
  productVariantId: ID
  quantity: Int
  runId: ID
  ticketId: ID
}

input OrderFiltersInput {
  id: ID
  status: [String!]
  user_name: String
}

input OrderInput {
  payment_amount: MoneyInput
  payment_note: String
}

type OrderQuantityByStatus {
  quantity: Int!
  status: String!
}

enum OrderStatus {
  """
  Order has been cancelled
  """
  cancelled

  """
  Order has been submitted and paid
  """
  paid

  """
  Order has not yet been submitted
  """
  pending

  """
  Order is submitted but not yet paid
  """
  unpaid
}

type OrdersPagination implements PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!
  entries: [Order!]!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

type Organization {
  conventions: [Convention!]!
  current_ability_can_manage_access: Boolean!
  id: ID!
  name: String!
  organization_roles: [OrganizationRole!]!
}

type OrganizationRole {
  id: ID!
  name: String!
  organization: Organization!
  permissions: [Permission!]!
  users: [User!]!
}

input OrganizationRoleInput {
  name: String
}

type Page {
  admin_notes: String
  cms_layout: CmsLayout
  content: String
  content_html: String!
  current_ability_can_delete: Boolean!
  current_ability_can_update: Boolean!
  hidden_from_search: Boolean!
  id: ID!
  name: String
  referenced_partials: [CmsPartial!]!
  skip_clickwrap_agreement: Boolean
  slug: String
}

input PageInput {
  admin_notes: String
  cmsLayoutId: ID
  content: String
  hidden_from_search: Boolean
  name: String
  skip_clickwrap_agreement: Boolean
  slug: String
}

"""
PaginationInterface provides a way to use offset-based pagination on a list of objects. This
is useful for UIs such as Intercode's table views, which provide a way to jump between numbered
pages.

Page numbers in PaginationInterface are 1-based (so, the first page is page 1, then page 2,
etc.) The number of items per page can be controlled via the per_page argument on paginated
fields. It defaults to 20, and can go up to 200.

Offset-based pagination is different from
[Relay's cursor-based pagination](https://relay.dev/graphql/connections.htm) that is more
commonly used in GraphQL APIs. We chose to go with an offset-based approach due to our UI
needs, but if a cursor-based approach is desirable in the future, we may also implement Relay
connections alongside our existing pagination fields.
"""
interface PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

input PayWhatYouWantInput {
  allowedCurrencyCodes: [String!]
  maximumAmount: MoneyInput
  minimumAmount: MoneyInput
  suggestedAmount: MoneyInput
}

type PayWhatYouWantValue {
  allowed_currency_codes: [String!]
  maximum_amount: Money
  minimum_amount: Money
  suggested_amount: Money
}

"""
How should an order be paid for?
"""
enum PaymentMode {
  free
  later
  now @deprecated(reason: "Please use payment_intent instead")
  payment_intent
}

type Permission {
  id: ID!
  model: PermissionedModel!
  permission: String!
  role: PermissionedRole!
}

input PermissionInput {
  modelId: ID
  model_type: PermissionedModelTypeIndicator
  permission: String!
  roleId: ID
  role_type: PermissionedRoleTypeIndicator
}

union PermissionedModel = CmsContentGroup | Convention | EventCategory

enum PermissionedModelTypeIndicator {
  CmsContentGroup
  Convention
  EventCategory
}

union PermissionedRole = OrganizationRole | StaffPosition

enum PermissionedRoleTypeIndicator {
  OrganizationRole
  StaffPosition
}

enum PricingStrategy {
  """
  Fixed price
  """
  fixed

  """
  Pay-what-you-want price
  """
  pay_what_you_want

  """
  Price that changes over time
  """
  scheduled_value
}

type PricingStructure {
  price(time: Date): Money
  pricing_strategy: PricingStrategy!
  value: PricingStructureValue!
}

input PricingStructureInput {
  fixed_value: MoneyInput
  pay_what_you_want_value: PayWhatYouWantInput
  pricing_strategy: PricingStrategy!
  scheduled_value: ScheduledMoneyValueInput
}

union PricingStructureValue = Money | PayWhatYouWantValue | ScheduledMoneyValue

type Product {
  available: Boolean!
  clickwrap_agreement: String
  clickwrap_agreement_html: String
  description: String
  description_html: String
  id: ID!
  image: ActiveStorageAttachment
  image_url: String @deprecated(reason: "Please use the image field instead.")
  name: String!
  order_quantities_by_status: [OrderQuantityByStatus!]!
  payment_options: [String!]!
  pricing_structure: PricingStructure!
  product_variants: [ProductVariant!]!
  provides_ticket_type: TicketType
}

input ProductInput {
  available: Boolean
  clickwrapAgreement: String
  deleteVariantIds: [ID!]
  description: String
  image: Upload
  name: String
  payment_options: [String!]
  pricing_structure: PricingStructureInput
  product_variants: [ProductVariantInput!]
  providesTicketTypeId: ID
}

type ProductVariant {
  description: String
  description_html: String
  id: ID!
  image: ActiveStorageAttachment
  image_url: String @deprecated(reason: "Please use the image field instead.")
  name: String!
  order_quantities_by_status: [OrderQuantityByStatus!]!
  override_pricing_structure: PricingStructure
  position: Int
  product: Product!
}

input ProductVariantInput {
  description: String
  id: ID
  image: Upload
  name: String
  override_pricing_structure: PricingStructureInput
}

"""
Autogenerated input type of ProvideEventTicket
"""
input ProvideEventTicketInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID
  ticketTypeId: ID
  userConProfileId: ID
}

"""
Autogenerated return type of ProvideEventTicket.
"""
type ProvideEventTicketPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  ticket: Ticket!
}

type Query {
  """
  If there is a CMS partial on the root site called `account_form_text`, renders it to HTML
  and returns the result. Otherwise, returns null.

  This is used by the "update your account" pages as a way to clarify that your account is
  shared between multiple conventions.
  """
  accountFormContentHtml: String

  """
  If the current user is an assumed identity (using the "become user" feature), this returns
  the actual profile of the signed-in account. If not, returns null.
  """
  assumedIdentityFromProfile: UserConProfile

  """
  Returns the CMS parent object associated with a given domain name. In a
  convention domain, this is the `Convention` itself. Otherwise, it's the `RootSite`.
  """
  cmsParentByDomain(domain: String!): CmsParent!

  """
  Returns the CMS parent object associated with the domain name of this HTTP request. In a
  convention domain, this is the `Convention` itself. Otherwise, it's the `RootSite`.
  """
  cmsParentByRequestHost: CmsParent!

  """
  Returns the convention associated with a specified domain name.
  """
  conventionByDomain(
    """
    The domain name to find a convention by.
    """
    domain: String!
  ): Convention!

  """
  Finds a convention by ID. If a matching one can't be found, the request will error out.
  """
  conventionById(id: ID): Convention!

  """
  Returns the convention associated with the domain name of this HTTP request. If one is not
  present, the request will error out. (For a version that will return null instead of
  erroring out, use `conventionByRequestHostIfPresent`.)
  """
  conventionByRequestHost: Convention!

  """
  Returns the convention associated with the domain name of this HTTP request. If one is not
  present, returns null.
  """
  conventionByRequestHostIfPresent: Convention

  """
  Returns a paginated list of conventions. See PaginationInterface for details on how to use
  paginated lists, and ConventionFiltersInput for filters you can use here.
  """
  conventions_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: ConventionFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): ConventionsPagination!

  """
  Returns the ability object for the current user's permissions, or an ability object for an
  anonymous user if no user is currently signed in.
  """
  currentAbility: Ability!

  """
  Returns the currently signed-in user. If no user is signed in, returns null.
  """
  currentUser: User

  """
  Returns the default currency for this site
  """
  defaultCurrencyCode: String!

  """
  Returns a paginated list of the _global_ email routes configured in Intercode.
  (Convention-specific email routing is controlled via that convention's StaffPositions.)
  """
  email_routes_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: EmailRouteFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): EmailRoutesPagination!

  """
  Returns whether or not this instance of Intercode has any third-party OAuth2 applications
  set up. If not, the UI will not show the "Authorized Applications" menu item to users.
  """
  hasOauthApplications: Boolean!

  """
  Returns the authorized OAuth applications for the current user. If no user is signed in,
  returns null.
  """
  myAuthorizedApplications: [AuthorizedApplication!]!

  """
  Given a set of valid OAuth query parameters for the `/oauth/authorize` endpoint, returns a
  JSON object containing the necessary data for rendering the pre-authorization screen that
  checks if you want to allow an application to access Intercode on your behalf.

  This essentially emulates the JSON behavior of
  [Doorkeeper](https://github.com/doorkeeper-gem/doorkeeper)'s API-only mode if you go to
  `/oauth/authorize` with query parameters. The only reason this query exists, rather than
  simply having clients actually call `/oauth/authorize`, is that we're running Doorkeeper
  in regular mode so that we can get the server-rendered HTML admin views.

  When we've implemented our own admin screens for OAuth
  (see [this Github issue](https://github.com/neinteractiveliterature/intercode/issues/2740)),
  this query will be deprecated.
  """
  oauthPreAuth(
    """
    A set of HTTP query parameters for `/oauth/authorize`, parsed out and
    represented as a JSON object.
    """
    queryParams: Json!
  ): Json!

  """
  Returns all organizations in the database.
  """
  organizations: [Organization!]!

  """
  Returns the singleton RootSite object, which is a CMS parent.
  """
  rootSite: RootSite!

  """
  Returns a list of all supported currency codes
  """
  supportedCurrencyCodes: [String!]!

  """
  Finds a user by ID. If there is no user with that ID, errors out.
  """
  user(
    """
    The ID of the user to find.
    """
    id: ID
  ): User!

  """
  Finds up to 25 users by ID. If any of the IDs don't match an existing user, errors out.
  """
  users(
    """
    The IDs of the users to find.
    """
    ids: [ID!]
  ): [User!]!

  """
  Returns a paginated list of users. See PaginationInterface for details on how to use
  paginated lists, and UserFiltersInput for filters you can use here.
  """
  users_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: UserFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): UsersPagination!
}

"""
A record of a decision the ranked choice automation made while processing a signup round.
"""
type RankedChoiceDecision {
  """
  The time this RankedChoiceDecision was created.
  """
  created_at: Date!

  """
  The decision the algorithm made.
  """
  decision: RankedChoiceDecisionValue!

  """
  Any additional data the algorithm attached to this decision record.
  """
  extra: JSON

  """
  The ID of this decision record.
  """
  id: ID!

  """
  The reason for this decision, if any.
  """
  reason: RankedChoiceDecisionReason

  """
  The signup that resulted from this decision, if any.
  """
  signup: Signup

  """
  The choice that was being processed when this decision was made, if any.
  """
  signup_ranked_choice: SignupRankedChoice

  """
  The signup request that resulted from this decision, if any.
  """
  signup_request: SignupRequest

  """
  The signup round in which this decision was made.
  """
  signup_round: SignupRound!

  """
  The time this RankedChoiceDecision was last modified.
  """
  updated_at: Date!

  """
  The user profile this decision pertains to, if any.
  """
  user_con_profile: UserConProfile
}

"""
Filters that can be applied to a paginated table of RankedChoiceDecisions.
"""
input RankedChoiceDecisionFiltersInput {
  """
  Filter by the type of decision(s) that were made.
  """
  decision: [RankedChoiceDecisionValue!]

  """
  Filter by the title of the event the decisions pertained to.
  """
  event_title: String

  """
  Filter by the reason(s) for the decisions.
  """
  reason: [RankedChoiceDecisionReason!]

  """
  Filter by the name of the user profiles these decisions pertained to.
  """
  user_con_profile_name: String
}

"""
The reason the ranked choice automation algorithm made the decision it did when evaluating a particular choice.
"""
enum RankedChoiceDecisionReason {
  """
  This choice would conflict with an existing signup this user has
  """
  CONFLICT

  """
  This event is full
  """
  FULL

  """
  Tickets are required in this convention and this user doesn't have one
  """
  MISSING_TICKET

  """
  This user already has the maximum number of allowed signups at this time
  """
  NO_MORE_SIGNUPS_ALLOWED

  """
  This user has no more pending ranked choices in their queue
  """
  NO_PENDING_CHOICES

  """
  The user's personal constraints prohibit signing up for this event (in conjunction with their existing signups)
  """
  RANKED_CHOICE_USER_CONSTRAINTS
}

"""
The decision the ranked choice automation algorithm made when evaluating a particular choice.
"""
enum RankedChoiceDecisionValue {
  """
  Sign the user up for the chosen event
  """
  SIGNUP

  """
  Skip this choice but continue evaluating this user's ranked choices
  """
  SKIP_CHOICE

  """
  Skip all remaining choices for this user
  """
  SKIP_USER

  """
  Sign the user up in the waitlist for the chosen event
  """
  WAITLIST
}

"""
A paginated table of RankedChoiceDecisions.
"""
type RankedChoiceDecisionsPagination implements PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!
  entries: [RankedChoiceDecision!]!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

"""
An order to execute ranked-choice signup rounds in.
"""
enum RankedChoiceOrder {
  """
  In lottery number order, lowest number first
  """
  ASC

  """
  In lottery number order, lowest number first, then highest, then lowest, etc.
  """
  ASC_SERPENTINE

  """
  In lottery number order, highest number first
  """
  DESC

  """
  In lottery number order, highest number first, then lowest, then highest, etc.
  """
  DESC_SERPENTINE
}

"""
A user-defined constraint on how many events the ranked choice algorithm should sign them up for.  This can be
time-bounded, and a user can have as many or as few of these as they like.
"""
type RankedChoiceUserConstraint {
  """
  When this constraint was created.
  """
  created_at: Date!

  """
  The time at which this constraint stops applying (non-inclusive).  If null, this constraint is unbounded on the
  finish side.
  """
  finish: Date

  """
  The ID of this constraint.
  """
  id: ID!

  """
  The maximum number of counted signups to be allowed in the timespan described by this constraint.
  """
  maximum_signups: Int!

  """
  The time at which this constraint starts applying (inclusive).  If null, this constraint is unbounded on the
  start side.
  """
  start: Date

  """
  The last time this constraint was modified.
  """
  updated_at: Date!

  """
  The user this constraint applies to.
  """
  user_con_profile: UserConProfile!
}

"""
A user-defined constraint on how many events the ranked choice algorithm should sign them up for.  This can be
time-bounded, and a user can have as many or as few of these as they like.
"""
input RankedChoiceUserConstraintInput {
  """
  The time at which this constraint stops applying (non-inclusive).  If null, this constraint is unbounded on the
  finish side.
  """
  finish: Date

  """
  The maximum number of counted signups to be allowed in the timespan described by this constraint.
  """
  maximumSignups: Int

  """
  The time at which this constraint starts applying (inclusive).  If null, this constraint is unbounded on the
  start side.
  """
  start: Date
}

"""
Autogenerated input type of RateEvent
"""
input RateEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID
  rating: Int!
}

"""
Autogenerated return type of RateEvent.
"""
type RateEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event!
}

enum ReceiveSignupEmail {
  """
  Receive email for all signup activity
  """
  ALL_SIGNUPS

  """
  Do not receive signup email
  """
  NO

  """
  Receive email for signup activity affecting confirmed signups
  """
  NON_WAITLIST_SIGNUPS
}

enum RefundStatus {
  """
  A refund was requested, but the charge had already been refunded
  """
  ALREADY_REFUNDED

  """
  No refund was attempted
  """
  NOT_REFUNDED

  """
  A refund was successfully provided
  """
  REFUNDED
}

type RegistrationPolicy {
  buckets: [RegistrationPolicyBucket!]!
  minimum_slots: Int
  minimum_slots_including_not_counted: Int
  only_uncounted: Boolean
  preferred_slots: Int
  preferred_slots_including_not_counted: Int
  prevent_no_preference_signups: Boolean!
  slots_limited: Boolean
  total_slots: Int
  total_slots_including_not_counted: Int
}

type RegistrationPolicyBucket {
  anything: Boolean!
  description: String
  expose_attendees: Boolean!
  key: String!
  minimum_slots: Int
  name: String
  not_counted: Boolean!
  preferred_slots: Int
  slots_limited: Boolean!
  total_slots: Int
}

"""
Autogenerated input type of RejectSignupRequest
"""
input RejectSignupRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of RejectSignupRequest.
"""
type RejectSignupRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signup_request: SignupRequest!
}

"""
Autogenerated input type of RenameCmsFile
"""
input RenameCmsFileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  filename: String!
  id: ID
}

"""
Autogenerated return type of RenameCmsFile.
"""
type RenameCmsFilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_file: CmsFile!
}

"""
Autogenerated input type of RerunModeratedRankedChoiceSignupRound
"""
input RerunModeratedRankedChoiceSignupRoundInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the SignupRound to rerun.
  """
  id: ID
}

"""
Autogenerated return type of RerunModeratedRankedChoiceSignupRound.
"""
type RerunModeratedRankedChoiceSignupRoundPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SignupRound after being rerun.
  """
  signup_round: SignupRound!
}

"""
Autogenerated input type of RestoreDroppedEvent
"""
input RestoreDroppedEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of RestoreDroppedEvent.
"""
type RestoreDroppedEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event!
}

"""
Autogenerated input type of RevokeAuthorizedApplication
"""
input RevokeAuthorizedApplicationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  uid: ID!
}

"""
Autogenerated return type of RevokeAuthorizedApplication.
"""
type RevokeAuthorizedApplicationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type Room {
  id: ID!
  name: String
  runs: [Run!]!
}

input RoomInput {
  name: String
}

type RootSite implements CmsParent {
  """
  Finds a CMS content group by ID within the domain name of this HTTP request. If there is no
  CMS content group with that ID, or the CMS content group is associated with a different
  domain name, errors out.
  """
  cmsContentGroup(
    """
    The ID of the CMS content group to find.
    """
    id: ID!
  ): CmsContentGroup!

  """
  Returns all CMS content groups within the current domain.
  """
  cmsContentGroups: [CmsContentGroup!]!

  """
  Returns all CMS files within the current domain.
  """
  cmsFiles: [CmsFile!]!

  """
  Returns all CMS GraphQL queries within the current domain.
  """
  cmsGraphqlQueries: [CmsGraphqlQuery!]!

  """
  Returns all CMS layouts within the current domain.
  """
  cmsLayouts: [CmsLayout!]!

  """
  Returns all CMS navigation items within the current domain.
  """
  cmsNavigationItems: [CmsNavigationItem!]!

  """
  Finds a CMS page within the domain name of this HTTP request. Exactly one of the three
  optional arguments (`id`, `slug`, and `rootPage`) must be specified. These each represent a
  different way of finding a page. If the desired page can't be found within the current
  domain name, errors out.
  """
  cmsPage(
    """
    The ID of the page to find.
    """
    id: ID

    """
    If true, returns the root page for this domain.
    """
    rootPage: Boolean

    """
    The unique slug of the page to find.
    """
    slug: String
  ): Page!

  """
  Returns all CMS pages within the current domain.
  """
  cmsPages: [Page!]!

  """
  Returns all CMS partials within the current domain.
  """
  cmsPartials: [CmsPartial!]!

  """
  Returns all CMS variables within the current domain.
  """
  cmsVariables: [CmsVariable!]!

  """
  Returns the default CMS layout used in this domain.
  """
  defaultLayout: CmsLayout!

  """
  Returns the CMS layout to be used for a particular URL path within the current domain. (This
  will be the page-specific layout if the URL corresponds to a page with a layout override, or
  the default layout for the domain otherwise.)
  """
  effectiveCmsLayout(
    """
    The path to find the effective layout for.
    """
    path: String!
  ): CmsLayout!

  """
  Does a full-text search within this domain.
  """
  fullTextSearch(
    """
    The text to search for.
    """
    query: String!
  ): SearchResult!
  host: String!
  id: ID!

  """
  Returns all the Liquid assigns for regular CMS page rendering in the current domain name.
  This is a combination of globally-accessible Liquid assigns and domain-specific user-defined
  CMS variables.
  """
  liquidAssigns: [LiquidAssign!]!

  """
  Given a Liquid text string, renders it to HTML and returns the result.
  """
  previewLiquid(
    """
    The Liquid content to render.
    """
    content: String!
  ): String!

  """
  Given a Markdown text string, renders it to HTML and returns the result.
  """
  previewMarkdown(
    """
    The event ID that this Markdown will apply to, if applicable.
    """
    eventId: ID

    """
    The event proposal ID that this Markdown will apply to, if applicable.
    """
    eventProposalId: ID

    """
    The Markdown content to render.
    """
    markdown: String!
  ): String!

  """
  The CMS page used for the root path (/) of this domain.
  """
  rootPage: Page!
  site_name: String!

  """
  Finds CMS content by partial name, case-insensitive, within the current domain's CMS content.
  For example, in a convention that has a partial called `attendee_profile` and a page called
  `info_for_attendees`, a search for `attendee` would return both of these.

  This query is always limited to a maximum of 10 results.
  """
  typeaheadSearchCmsContent(
    """
    The partial name to search by.  If not specified, returns all CMS content
    within the current domain (limited to 10 results).
    """
    name: String
  ): [CmsContent!]!
  url: String!
}

input RootSiteInput {
  defaultLayoutId: ID
  rootPageId: ID
  site_name: String
}

"""
A run of an event within a convention. Events can have multiple runs of the course of a convention (with some
exceptions, such as conventions that use single_event site mode).
"""
type Run {
  """
  The number of confirmed signups in limited-signup buckets for this run
  """
  confirmed_limited_signup_count: Int!

  """
  The number of confirmed signups (regardless of bucket) for this run
  """
  confirmed_signup_count: Int!

  """
  Whether or not the current user is allowed to request a signup summary of this run
  """
  current_ability_can_signup_summary_run: Boolean!

  """
  The time at which this run finishes
  """
  ends_at: Date!

  """
  The event this is a run of
  """
  event: Event!

  """
  A GroupedSignupCounts object for this run, from which more detailed information about the number of signups can
  be obtained (sliced in various ways).
  """
  grouped_signup_counts: [GroupedSignupCount!]!

  """
  The ID of this run
  """
  id: ID!

  """
  The current user's SignupRankedChoices for this Run
  """
  my_signup_ranked_choices: [SignupRankedChoice!]!

  """
  The current user's SignupRequests for this Run
  """
  my_signup_requests: [SignupRequest!]!

  """
  The current user's Signups for this Run
  """
  my_signups: [Signup!]!

  """
  The number of confirmed, but not counted signups for this run
  """
  not_counted_confirmed_signup_count: Int!

  """
  The number of non-counted signups for this run (regardless of confirmation status)
  """
  not_counted_signup_count: Int!

  """
  The names of all the rooms this run takes place in
  """
  room_names: [String!]!

  """
  The rooms this run takes place in
  """
  rooms: [Room!]!

  """
  An optional, admin-only note to put on this run.  This note is not visible to most users.
  """
  schedule_note: String
  signup_changes_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: SignupChangeFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): SignupChangesPagination!
  signup_count_by_state_and_bucket_key_and_counted: Json! @deprecated(reason: "Please use grouped_signup_counts instead")

  """
  The signups for this run
  """
  signups_paginated(
    """
    Only return objects matching these filters
    """
    filters: SignupFiltersInput

    """
    The number of the page to return (the first page is 1)
    """
    page: Int

    """
    The number of items to return per page
    """
    per_page: Int

    """
    Sort the resulting objects
    """
    sort: [SortInput!]
  ): SignupsPagination!

  """
  The time at which this run starts
  """
  starts_at: Date!

  """
  If present, Intercode will append this suffix string to this run whenever it appears in the UI.  This can be
  used to disambiguate between multiple runs of the same event.
  """
  title_suffix: String

  """
  The number of signups currently on the waitlist for this run
  """
  waitlisted_signup_count: Int!
}

input RunFiltersInput {
  category: [Int]
  form_items: JSON
  my_rating: [Int!]
  title: String
  title_prefix: String
}

input RunInput {
  roomIds: [ID!]
  schedule_note: String
  starts_at: Date
  title_suffix: String
}

type RunsPagination implements PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!
  entries: [Run!]!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

type SalesCountByProductAndPaymentAmount {
  count: Int!
  payment_amount: Money!
  product: Product!
  status: OrderStatus!
}

type ScheduledMoneyValue {
  timespans: [TimespanWithMoneyValue!]!
}

input ScheduledMoneyValueInput {
  timespans: [TimespanWithMoneyValueInput!]!
}

type ScheduledValue {
  timespans: [TimespanWithValue!]!
}

input ScheduledValueInput {
  timespans: [TimespanWithValueInput!]!
}

enum SchedulingUi {
  recurring
  regular
  single_run
}

type SearchResult {
  entries: [SearchResultEntry!]!
  total_entries: Int!
}

type SearchResultEntry {
  highlight: String
  model: SearchableModel!
  rank: Float!
  title: String
}

union SearchableModel = Event | EventProposal | Page | UserConProfile

"""
Autogenerated input type of SendNotificationPreview
"""
input SendNotificationPreviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: Boolean!
  event_key: String!
  sms: Boolean!
}

"""
Autogenerated return type of SendNotificationPreview.
"""
type SendNotificationPreviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of SetCmsVariable
"""
input SetCmsVariableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_variable: CmsVariableInput!
}

"""
Autogenerated return type of SetCmsVariable.
"""
type SetCmsVariablePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_variable: CmsVariable!
}

"""
Autogenerated input type of SetConventionCanceled
"""
input SetConventionCanceledInput {
  canceled: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of SetConventionCanceled.
"""
type SetConventionCanceledPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  convention: Convention!
}

enum ShowSchedule {
  gms
  no
  priv
  yes
}

type Signup {
  age_restrictions_check: String!
  bucket_key: String
  choice: Int
  counted: Boolean!
  created_at: Date!
  expires_at: Date
  id: ID!
  requested_bucket_key: String
  run: Run!
  state: SignupState!
  updated_at: Date!
  user_con_profile: UserConProfile!
  waitlist_position: Int
}

"""
The automation behavior to use for event signups in a Convention.  Currently, we only support one type of
automated signups, the "ranked choice" behavior.  Conventions can also disable automation entirely using the
"none" value.
"""
enum SignupAutomationMode {
  """
  Signups are fully manual
  """
  none

  """
  Attendees make a ranked list of choices and the site attempts to give everyone what they want
  """
  ranked_choice
}

type SignupChange {
  action: SignupChangeAction!
  bucket_key: String
  counted: Boolean!
  created_at: Date!
  id: ID!
  previous_signup_change: SignupChange
  run: Run!
  signup: Signup!
  state: SignupState!
  updated_at: Date!
  user_con_profile: UserConProfile!
}

enum SignupChangeAction {
  accept_signup_ranked_choice
  accept_signup_request
  admin_create_signup
  change_registration_policy
  hold_expired
  self_service_signup
  ticket_purchase
  unknown
  vacancy_fill
  withdraw
}

input SignupChangeFiltersInput {
  action: [String!]
  event_title: String
  name: String
}

type SignupChangesPagination implements PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!
  entries: [SignupChange!]!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

type SignupCountByState {
  count: Int!
  state: SignupState!
}

input SignupFiltersInput {
  bucket: [String!]
  email: String
  name: String
  state: [String!]
}

enum SignupMode {
  """
  Attendees can request signups and signup changes but con staff must approve them
  """
  moderated

  """
  Attendees can sign themselves up for events
  """
  self_service
}

type SignupMoveResult {
  bucket_key: String
  prev_bucket_key: String
  prev_state: SignupState!
  signup: Signup!
  signup_id: Int!
  state: SignupState!
}

"""
In a ranked-choice signup convention, SignupRankedChoices are the items in a user's signup queue.  Users may have
as many of these as they like.  When SignupRounds open, Intercode will automatically attempt to sign users up for
the number of events they're allowed at this time based on their SignupRankedChoices.
"""
type SignupRankedChoice {
  """
  The time this choice was added to the user's queue
  """
  created_at: Date!

  """
  The ID of this SignupRankedChoice
  """
  id: ID!

  """
  The priority of this choice (lower numbers are higher priority)
  """
  priority: Int!

  """
  All the automated decisions that have been made about this choice
  """
  ranked_choice_decisions: [RankedChoiceDecision!]!

  """
  The bucket that this choice is trying to sign up in (or null, if it's a no-preference signup)
  """
  requested_bucket_key: String

  """
  The resulting Signup from processing this choice, if it has been processed
  """
  result_signup: Signup

  """
  The resulting SignupRequest from processing this choice, if it has been processed (and is in a moderated-signup
  convention)
  """
  result_signup_request: SignupRequest

  """
  The current processing state of this choice (e.g. pending, accepted)
  """
  state: SignupRankedChoiceState!

  """
  The event run that this choice is trying to sign up for
  """
  target_run: Run!

  """
  The last time this choice was modified
  """
  updated_at: Date!

  """
  The user who last updated this choice
  """
  updated_by: User!

  """
  The user whose queue this choice is part of
  """
  user_con_profile: UserConProfile!
}

"""
The processing state of a SignupRankedChoice
"""
enum SignupRankedChoiceState {
  """
  We have not yet attempted to process this choice
  """
  pending

  """
  The attendee has had a signup request put in (see the result_signup_request field for the actual signup request)
  """
  requested

  """
  The attendee has been signed up (see the result_signup field for the actual signup)
  """
  signed_up

  """
  The attendee has been waitlisted (see the result_signup field for the actual signup)
  """
  waitlisted
}

"""
In a moderated-signup convention, SignupRequests are the queue of signups that users have asked to do.  Convention
staff can go through these requests and accept them (which produces a Signup) or reject them.
"""
type SignupRequest {
  """
  The time this request was put in
  """
  created_at: Date!

  """
  The ID of this SignupRequest
  """
  id: ID!

  """
  The signup that this request is asking to replace (e.g. if the user is trying to leave a conflicting event).  If
  this request is accepted, the replace_signup will be withdrawn.
  """
  replace_signup: Signup

  """
  The bucket that this request is asking to sign up in (or null, if it's a no-preference signup)
  """
  requested_bucket_key: String

  """
  The resulting Signup from accepting this request, if it has been accepted
  """
  result_signup: Signup

  """
  The SignupRankedChoice this request resulted from, if any
  """
  signup_ranked_choice: SignupRankedChoice

  """
  The current processing state of this request (e.g. pending, accepted, rejected)
  """
  state: SignupRequestState!

  """
  The run the user would like to sign up for
  """
  target_run: Run!

  """
  The last time this request was modified
  """
  updated_at: Date!

  """
  The last user who modified this request
  """
  updated_by: User!

  """
  The user who made this request
  """
  user_con_profile: UserConProfile!
}

input SignupRequestFiltersInput {
  state: [SignupRequestState!]
}

"""
The processing state of a SignupRequest
"""
enum SignupRequestState {
  """
  The request has been accepted and the requester has been signed up (see the result_signup field for the actual signup)
  """
  accepted

  """
  The request has not yet been reviewed by a moderator
  """
  pending

  """
  The request has been rejected and the requester has not been signed up
  """
  rejected

  """
  The requester withdrew their request before it was accepted or rejected
  """
  withdrawn
}

type SignupRequestsPagination implements PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!
  entries: [SignupRequest!]!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

"""
A round of signups in a particular convention.  This represents a range of time in which a certain number of
signups is allowed.

In conventions that use automated signups (e.g. ranked-choice signups), signup rounds are used as triggers for
signup automation.
"""
type SignupRound {
  """
  The convention this SignupRound is in.
  """
  convention: Convention!

  """
  When this SignupRound was first created.
  """
  created_at: Date!

  """
  In conventions that use automated signups, when this SignupRound was executed.  If it has not been executed yet,
  this will be null.
  """
  executed_at: Date

  """
  The ID of this SignupRound.
  """
  id: ID!

  """
  Either "not_yet", "not_now", "unlimited", or a string representation of a number.  This is the maximum number of
  signups allowed during this SignupRound.
  """
  maximum_event_signups: String!
  ranked_choice_decisions_paginated(
    """
    Filters to restrict what items will appear in the result set.
    """
    filters: RankedChoiceDecisionFiltersInput

    """
    The page number to return from the result set.  Page numbers start with 1.
    """
    page: Int

    """
    The number of items to return per page.  Defaults to 20, can go up to 200.
    """
    per_page: Int

    """
    A set of fields to use for ordering the result set. The second field is used as a
    tiebreaker for the first, the third field is used as a tiebreaker for the first two,
    and so on. If the sort argument is missing or empty, the order of items will be left
    up to the database (and may be unpredictable).
    """
    sort: [SortInput!]
  ): RankedChoiceDecisionsPagination!

  """
  In ranked-choice signup conventions, the order to use for executing users' ranked choices in this round.
  """
  ranked_choice_order: RankedChoiceOrder

  """
  When this SignupRound starts.
  """
  start: Date

  """
  When this SignupRound was last modified.
  """
  updated_at: Date!
}

"""
An input for creating or modifying SignupRounds.
"""
input SignupRoundInput {
  """
  The maximum number of signups allowed during this signup round
  """
  maximum_event_signups: String

  """
  For ranked-choice conventions, the order to execute signup choices in
  """
  ranked_choice_order: RankedChoiceOrder

  """
  The time that this signup round starts
  """
  start: Date
}

enum SignupState {
  """
  Attendee's spot is confirmed
  """
  confirmed

  """
  Attendee's spot is held temporarily while the attendee finishes paying for their ticket
  """
  ticket_purchase_hold

  """
  Attendee is on the waitlist for this event and may be pulled in automatically
  """
  waitlisted

  """
  Attendee has withdrawn from this event (and this signup is no longer valid)
  """
  withdrawn
}

type SignupsPagination implements PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!
  entries: [Signup!]!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

enum SiteMode {
  """
  Site behaves as a convention with multiple events
  """
  convention

  """
  Site behaves as a series of standalone events
  """
  event_series

  """
  Site behaves as a single standalone event
  """
  single_event
}

"""
Autogenerated input type of SortCmsNavigationItems
"""
input SortCmsNavigationItemsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sort_items: [UpdateCmsNavigationItemInput!]!
}

"""
Autogenerated return type of SortCmsNavigationItems.
"""
type SortCmsNavigationItemsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  navigation_items: [CmsNavigationItem!]!
}

"""
A description of a field to sort a result set by. This is typically used in pagination
fields to specify how the results should be ordered.
"""
input SortInput {
  """
  If true, the field will be sorted in descending order. If false, it will be sorted in
  ascending order.
  """
  desc: Boolean!

  """
  The name of the field to sort by.
  """
  field: String!
}

type StaffPosition {
  cc_addresses: [String!]!
  email: String
  email_aliases: [String!]!
  id: ID!
  name: String!
  permissions: [Permission!]!
  user_con_profiles: [UserConProfile!]!
  visible: Boolean
}

input StaffPositionInput {
  cc_addresses: [String!]
  email: String
  email_aliases: [String!]
  name: String
  userConProfileIds: [ID!]
  visible: Boolean
}

type StripeAccount {
  account_onboarding_link(base_url: String!): String!
  charges_enabled: Boolean!
  display_name: String
  email: String
  id: ID!
}

"""
Autogenerated input type of SubmitEventProposal
"""
input SubmitEventProposalInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of SubmitEventProposal.
"""
type SubmitEventProposalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_proposal: EventProposal!
}

"""
Autogenerated input type of SubmitOrder
"""
input SubmitOrderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the order to submit.
  """
  id: ID

  """
  The ID of the Stripe PaymentIntent to use for payment, if applicable.
  """
  payment_intent_id: String

  """
  The payment mode to use for submitting this order.
  """
  payment_mode: PaymentMode!
}

"""
Autogenerated return type of SubmitOrder.
"""
type SubmitOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The order after successful submission.
  """
  order: Order!
}

type TeamMember {
  display_team_member: Boolean!
  email: String
  event: Event!
  id: ID!
  receive_con_email: Boolean!
  receive_signup_email: ReceiveSignupEmail!
  show_email: Boolean!
  user_con_profile: UserConProfile!
}

input TeamMemberInput {
  display_team_member: Boolean
  receive_con_email: Boolean
  receive_signup_email: ReceiveSignupEmail
  show_email: Boolean
}

type Ticket {
  convention: Convention!
  created_at: Date!
  id: ID!
  order_entry: OrderEntry
  provided_by_event: Event
  run: Run
  ticket_type: TicketType!
  updated_at: Date!
  user_con_profile: UserConProfile!
}

type TicketCountByTypeAndPaymentAmount {
  count: Int!
  payment_amount: Money!
  ticket_type: TicketType!
}

input TicketInput {
  providedByEventId: ID
  ticketTypeId: ID
}

enum TicketMode {
  """
  Tickets are neither sold nor required in this convention
  """
  disabled

  """
  A valid ticket is required to sign up for events in this convention
  """
  required_for_signup

  """
  Each event in this convention sells tickets separately
  """
  ticket_per_event
}

type TicketType {
  allows_event_signups: Boolean!
  convention: Convention
  counts_towards_convention_maximum: Boolean!
  description: String
  event: Event
  id: ID!
  maximum_event_provided_tickets(eventId: ID): Int!
  name: String!
  parent: TicketTypeParent!
  providing_products: [Product!]!
}

input TicketTypeInput {
  allows_event_signups: Boolean
  counts_towards_convention_maximum: Boolean
  description: String
  maximum_event_provided_tickets: Int
  name: String
  pricing_schedule: ScheduledMoneyValueInput
  publicly_available: Boolean
}

union TicketTypeParent = Convention | Event

type TimespanWithMoneyValue {
  finish: Date
  start: Date
  value: Money!
}

input TimespanWithMoneyValueInput {
  finish: Date
  start: Date
  value: MoneyInput!
}

type TimespanWithValue {
  finish: Date
  start: Date
  value: String!
}

input TimespanWithValueInput {
  finish: Date
  start: Date
  string_value: String
}

enum TimezoneMode {
  """
  Display dates and times using convention’s local time zone
  """
  convention_local

  """
  Display dates and times using user’s local time zone
  """
  user_local
}

"""
Autogenerated input type of TransitionEventProposal
"""
input TransitionEventProposalInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  drop_event: Boolean
  id: ID
  status: String!
}

"""
Autogenerated return type of TransitionEventProposal.
"""
type TransitionEventProposalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_proposal: EventProposal!
}

"""
Autogenerated input type of UpdateCmsContentGroup
"""
input UpdateCmsContentGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_content_group: CmsContentGroupInput!
  grant_permissions: [PermissionInput!]
  id: ID
  revoke_permissions: [PermissionInput!]
}

"""
Autogenerated return type of UpdateCmsContentGroup.
"""
type UpdateCmsContentGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_content_group: CmsContentGroup!
}

"""
Autogenerated input type of UpdateCmsGraphqlQuery
"""
input UpdateCmsGraphqlQueryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  query: CmsGraphqlQueryInput!
}

"""
Autogenerated return type of UpdateCmsGraphqlQuery.
"""
type UpdateCmsGraphqlQueryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  query: CmsGraphqlQuery!
}

"""
Autogenerated input type of UpdateCmsLayout
"""
input UpdateCmsLayoutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_layout: CmsLayoutInput!
  id: ID
}

"""
Autogenerated return type of UpdateCmsLayout.
"""
type UpdateCmsLayoutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_layout: CmsLayout!
}

"""
Autogenerated input type of UpdateCmsNavigationItem
"""
input UpdateCmsNavigationItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_navigation_item: CmsNavigationItemInput
  id: ID
}

"""
Autogenerated return type of UpdateCmsNavigationItem.
"""
type UpdateCmsNavigationItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_navigation_item: CmsNavigationItem!
}

"""
Autogenerated input type of UpdateCmsPartial
"""
input UpdateCmsPartialInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_partial: CmsPartialInput!
  id: ID
}

"""
Autogenerated return type of UpdateCmsPartial.
"""
type UpdateCmsPartialPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  cms_partial: CmsPartial!
}

"""
Autogenerated input type of UpdateConvention
"""
input UpdateConventionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  convention: ConventionInput!
  id: ID
}

"""
Autogenerated return type of UpdateConvention.
"""
type UpdateConventionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  convention: Convention!
}

"""
Autogenerated input type of UpdateCoupon
"""
input UpdateCouponInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coupon: CouponInput!
  id: ID
}

"""
Autogenerated return type of UpdateCoupon.
"""
type UpdateCouponPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coupon: Coupon!
}

"""
Autogenerated input type of UpdateDepartment
"""
input UpdateDepartmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  department: DepartmentInput!
  id: ID
}

"""
Autogenerated return type of UpdateDepartment.
"""
type UpdateDepartmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  department: Department!
}

"""
Autogenerated input type of UpdateEmailRoute
"""
input UpdateEmailRouteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email_route: EmailRouteInput!
  id: ID
}

"""
Autogenerated return type of UpdateEmailRoute.
"""
type UpdateEmailRoutePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email_route: EmailRoute!
}

"""
Autogenerated input type of UpdateEventAdminNotes
"""
input UpdateEventAdminNotesInput {
  admin_notes: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of UpdateEventAdminNotes.
"""
type UpdateEventAdminNotesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event!
}

"""
Autogenerated input type of UpdateEventCategory
"""
input UpdateEventCategoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_category: EventCategoryInput!
  id: ID
}

"""
Autogenerated return type of UpdateEventCategory.
"""
type UpdateEventCategoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_category: EventCategory!
}

"""
Autogenerated input type of UpdateEvent
"""
input UpdateEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: EventInput
  id: ID
}

"""
Autogenerated return type of UpdateEvent.
"""
type UpdateEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event!
}

"""
Autogenerated input type of UpdateEventProposalAdminNotes
"""
input UpdateEventProposalAdminNotesInput {
  admin_notes: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of UpdateEventProposalAdminNotes.
"""
type UpdateEventProposalAdminNotesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_proposal: EventProposal!
}

"""
Autogenerated input type of UpdateEventProposal
"""
input UpdateEventProposalInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_proposal: EventProposalInput!
  id: ID
}

"""
Autogenerated return type of UpdateEventProposal.
"""
type UpdateEventProposalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_proposal: EventProposal!
}

"""
Autogenerated input type of UpdateForm
"""
input UpdateFormInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form: FormInput!
  id: ID
}

"""
Autogenerated input type of UpdateFormItem
"""
input UpdateFormItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form_item: FormItemInput!
  id: ID
}

"""
Autogenerated return type of UpdateFormItem.
"""
type UpdateFormItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form_item: FormItem!
}

"""
Autogenerated return type of UpdateForm.
"""
type UpdateFormPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form: Form!
}

"""
Autogenerated input type of UpdateFormSection
"""
input UpdateFormSectionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form_section: FormSectionInput!
  id: ID
}

"""
Autogenerated return type of UpdateFormSection.
"""
type UpdateFormSectionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form_section: FormSection!
}

"""
Autogenerated input type of UpdateFormWithJSON
"""
input UpdateFormWithJSONInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form_json: String!
  id: ID
}

"""
Autogenerated return type of UpdateFormWithJSON.
"""
type UpdateFormWithJSONPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  form: Form!
}

"""
Autogenerated input type of UpdateMaximumEventProvidedTicketsOverride
"""
input UpdateMaximumEventProvidedTicketsOverrideInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  override_value: Int!
}

"""
Autogenerated return type of UpdateMaximumEventProvidedTicketsOverride.
"""
type UpdateMaximumEventProvidedTicketsOverridePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  maximum_event_provided_tickets_override: MaximumEventProvidedTicketsOverride!
}

"""
Autogenerated input type of UpdateNotificationTemplate
"""
input UpdateNotificationTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event_key: String!
  notification_template: NotificationTemplateInput!
}

"""
Autogenerated return type of UpdateNotificationTemplate.
"""
type UpdateNotificationTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  notification_template: NotificationTemplate!
}

"""
Autogenerated input type of UpdateOrderEntry
"""
input UpdateOrderEntryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  order_entry: OrderEntryInput!
}

"""
Autogenerated return type of UpdateOrderEntry.
"""
type UpdateOrderEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order_entry: OrderEntry!
}

"""
Autogenerated input type of UpdateOrder
"""
input UpdateOrderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  order: OrderInput!
}

"""
Autogenerated return type of UpdateOrder.
"""
type UpdateOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order: Order!
}

"""
Autogenerated input type of UpdateOrganizationRole
"""
input UpdateOrganizationRoleInput {
  addUserIds: [ID!]
  add_permissions: [PermissionInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  organization_role: OrganizationRoleInput!
  removePermissionIds: [ID!]
  removeUserIds: [ID!]
}

"""
Autogenerated return type of UpdateOrganizationRole.
"""
type UpdateOrganizationRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  organization_role: OrganizationRole!
}

"""
Autogenerated input type of UpdatePage
"""
input UpdatePageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  page: PageInput!
}

"""
Autogenerated return type of UpdatePage.
"""
type UpdatePagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  page: Page!
}

"""
Autogenerated input type of UpdateProduct
"""
input UpdateProductInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  product: ProductInput!
}

"""
Autogenerated return type of UpdateProduct.
"""
type UpdateProductPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  product: Product!
}

"""
Autogenerated input type of UpdateRankedChoiceUserConstraint
"""
input UpdateRankedChoiceUserConstraintInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the constraint to update.
  """
  id: ID!

  """
  The updated values to use for this constraint.
  """
  rankedChoiceUserConstraint: RankedChoiceUserConstraintInput!
}

"""
Autogenerated return type of UpdateRankedChoiceUserConstraint.
"""
type UpdateRankedChoiceUserConstraintPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The constraint after being updated.
  """
  ranked_choice_user_constraint: RankedChoiceUserConstraint!
}

"""
Autogenerated input type of UpdateRoom
"""
input UpdateRoomInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  room: RoomInput!
}

"""
Autogenerated return type of UpdateRoom.
"""
type UpdateRoomPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  room: Room!
}

"""
Autogenerated input type of UpdateRootSite
"""
input UpdateRootSiteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  root_site: RootSiteInput!
}

"""
Autogenerated return type of UpdateRootSite.
"""
type UpdateRootSitePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  root_site: RootSite!
}

"""
Autogenerated input type of UpdateRun
"""
input UpdateRunInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  run: RunInput!
}

"""
Autogenerated return type of UpdateRun.
"""
type UpdateRunPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  run: Run!
}

"""
Autogenerated input type of UpdateSignupBucket
"""
input UpdateSignupBucketInput {
  bucket_key: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of UpdateSignupBucket.
"""
type UpdateSignupBucketPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signup: Signup!
}

"""
Autogenerated input type of UpdateSignupCounted
"""
input UpdateSignupCountedInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  counted: Boolean!
  id: ID
}

"""
Autogenerated return type of UpdateSignupCounted.
"""
type UpdateSignupCountedPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signup: Signup!
}

"""
Autogenerated input type of UpdateSignupRankedChoicePriority
"""
input UpdateSignupRankedChoicePriorityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the SignupRankedChoice to update
  """
  id: ID!

  """
  The new priority to set the SignupRankedChoice to
  """
  priority: Int!
}

"""
Autogenerated return type of UpdateSignupRankedChoicePriority.
"""
type UpdateSignupRankedChoicePriorityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SignupRankedChoice that has just been reprioritized
  """
  signup_ranked_choice: SignupRankedChoice!
}

"""
Autogenerated input type of UpdateSignupRound
"""
input UpdateSignupRoundInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the SignupRound to update
  """
  id: ID!

  """
  The new data to write to the SignupRound
  """
  signupRound: SignupRoundInput!
}

"""
Autogenerated return type of UpdateSignupRound.
"""
type UpdateSignupRoundPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SignupRound that has just been reprioritized
  """
  signup_round: SignupRound!
}

"""
Autogenerated input type of UpdateStaffPosition
"""
input UpdateStaffPositionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  staff_position: StaffPositionInput!
}

"""
Autogenerated return type of UpdateStaffPosition.
"""
type UpdateStaffPositionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  staff_position: StaffPosition!
}

"""
Autogenerated input type of UpdateStaffPositionPermissions
"""
input UpdateStaffPositionPermissionsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  grant_permissions: [PermissionInput!]!
  revoke_permissions: [PermissionInput!]!
  staffPositionId: ID
}

"""
Autogenerated return type of UpdateStaffPositionPermissions.
"""
type UpdateStaffPositionPermissionsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  staff_position: StaffPosition!
}

"""
Autogenerated input type of UpdateTeamMember
"""
input UpdateTeamMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  team_member: TeamMemberInput!
}

"""
Autogenerated return type of UpdateTeamMember.
"""
type UpdateTeamMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  team_member: TeamMember!
}

"""
Autogenerated input type of UpdateTicket
"""
input UpdateTicketInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  ticket: TicketInput!
}

"""
Autogenerated return type of UpdateTicket.
"""
type UpdateTicketPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  ticket: Ticket!
}

"""
Autogenerated input type of UpdateTicketType
"""
input UpdateTicketTypeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  ticket_type: TicketTypeInput!
}

"""
Autogenerated return type of UpdateTicketType.
"""
type UpdateTicketTypePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  ticket_type: TicketType!
}

"""
Autogenerated input type of UpdateUserActivityAlert
"""
input UpdateUserActivityAlertInput {
  add_notification_destinations: [NotificationDestinationInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  removeNotificationDestinationIds: [ID!]
  user_activity_alert: UserActivityAlertInput!
}

"""
Autogenerated return type of UpdateUserActivityAlert.
"""
type UpdateUserActivityAlertPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user_activity_alert: UserActivityAlert!
}

"""
Autogenerated input type of UpdateUserConProfile
"""
input UpdateUserConProfileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  user_con_profile: UserConProfileInput!
}

"""
Autogenerated return type of UpdateUserConProfile.
"""
type UpdateUserConProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user_con_profile: UserConProfile!
}

scalar Upload

type User {
  email: String
  event_proposals: [EventProposal!]!
  first_name: String
  id: ID!
  last_name: String
  name: String
  name_inverted: String
  privileges: [String!]
  user_con_profiles: [UserConProfile!]!
}

type UserActivityAlert {
  convention: Convention!
  email: String
  id: ID!
  notification_destinations: [NotificationDestination!]!
  partial_name: String
  trigger_on_ticket_create: Boolean!
  trigger_on_user_con_profile_create: Boolean!
  user: User
}

input UserActivityAlertInput {
  email: String
  partial_name: String
  trigger_on_ticket_create: Boolean
  trigger_on_user_con_profile_create: Boolean
  userId: ID
}

"""
A UserConProfile is a user's profile in a particular convention web site.  Most convention-level objects are
attached to the UserConProfile (e.g. signups, event team memberships, staff positions, etc.).
"""
type UserConProfile {
  """
  This user profile's permission set.
  """
  ability: Ability

  """
  Has this user accepted the clickwrap agreement for this convention (if it has one)?
  """
  accepted_clickwrap_agreement: Boolean

  """
  The street address portion of this profile's mailing address.
  """
  address: String

  """
  The bio to display for this user profile, in Markdown format.
  """
  bio: String

  """
  The bio to display for this user profile, rendered as HTML.
  """
  bio_html: String

  """
  If present, overrides the name to use for this user profile in their bio display.
  """
  bio_name: String

  """
  This user profile's date of birth.
  """
  birth_date: Date

  """
  Is this user allowed to display a bio on the web site (e.g. because they're a convention staff member or an
  event team member)?
  """
  can_have_bio: Boolean!

  """
  Does this user have permission to override the event-provided ticket thresholds in this convention?
  """
  can_override_maximum_event_provided_tickets: Boolean!

  """
  The city portion of this profile's mailing address.
  """
  city: String

  """
  The convention this profile is attached to.
  """
  convention: Convention!

  """
  The country portion of this profile's mailing address.
  """
  country: String

  """
  If this profile has a pending order, returns that order. Otherwise, returns null.
  """
  current_pending_order: Order
  current_user_form_item_viewer_role: FormItemRole!
  current_user_form_item_writer_role: FormItemRole!

  """
  This user profile's email address.
  """
  email: String

  """
  This user profile's first name.
  """
  first_name: String!
  form_response_attrs_json(itemIdentifiers: [String!]): Json
  form_response_attrs_json_with_rendered_markdown(itemIdentifiers: [String!]): Json

  """
  Has this user enabled Gravatars for this profile?
  """
  gravatar_enabled: Boolean!

  """
  The URL of this profile's Gravatar.
  """
  gravatar_url: String!

  """
  The randomly-generated secret portion of the URL to use for fetching this profile's personal calendar.
  """
  ical_secret: String

  """
  The ID of this profile.
  """
  id: ID!

  """
  This user profile's last name.
  """
  last_name: String!

  """
  This profile's mobile phone number.
  """
  mobile_phone: String

  """
  This user profile's full name, including their nickname if present.
  """
  name: String!

  """
  This user profile's name in Last, First format.
  """
  name_inverted: String!

  """
  This user profile's full name, not including their nickname.
  """
  name_without_nickname: String!

  """
  This user profile's nickname.
  """
  nickname: String

  """
  A human-readable summary of all this profile's orders.
  """
  order_summary: String!

  """
  All the orders placed by this profile.
  """
  orders: [Order!]!

  """
  If this user can't be signed up for any of their ranked choices, should the site waitlist them?
  """
  ranked_choice_allow_waitlist: Boolean!

  """
  All the constraints this profile has placed on the number of ranked choice signups they want.
  """
  ranked_choice_user_constraints: [RankedChoiceUserConstraint!]!

  """
  Should this profile's bio use the nickname as part of their name?
  """
  show_nickname_in_bio: Boolean

  """
  This user's ranked choice list for signups.
  """
  signup_ranked_choices: [SignupRankedChoice!]!

  """
  All the signup requests made by this profile.
  """
  signup_requests: [SignupRequest!]!

  """
  All the event signups attached to this profile.
  """
  signups: [Signup!]!

  """
  Does this profile belong to a global site admin?
  """
  site_admin: Boolean!

  """
  All the staff positions this profile belongs to.
  """
  staff_positions: [StaffPosition!]!

  """
  The state portion of this profile's mailing address.
  """
  state: String

  """
  All the team memberships this profile is in.
  """
  team_members: [TeamMember!]!

  """
  This profile's convention ticket, if present.
  """
  ticket: Ticket

  """
  The user account attached to this profile.
  """
  user: User

  """
  The ID of the user account this profile belongs to.

  This is a little bit of a weird thing to expose here; normally we'd just have people query for
  User, but access to that object is restricted.  So if you need the user ID (e.g. to determine whether two profiles
  are the same person) but you don't necessarily have access to the User account, you can use this field.
  """
  user_id: ID!

  """
  The ZIP portion of this profile's mailing address.
  """
  zipcode: String
}

input UserConProfileFiltersInput {
  attending: Boolean
  email: String
  first_name: String
  is_team_member: Boolean
  last_name: String
  name: String
  payment_amount: Float

  """
  DEPRECATED. Privileges are deprecated in favor of permissions and staff positions
  """
  privileges: [String!]
  ticket: [String!]
  ticket_type: [String!]
}

"""
An input for creating or modifying UserConProfiles.
"""
input UserConProfileInput {
  """
  The street address portion of this profile's mailing address.
  """
  address: String

  """
  The time this user profile prefers to be called on the phone.
  """
  best_call_time: String

  """
  The bio to display for this user profile, in Markdown format.
  """
  bio: String

  """
  This user profile's date of birth.
  """
  birth_date: Date

  """
  The city portion of this profile's mailing address.
  """
  city: String

  """
  The country portion of this profile's mailing address.
  """
  country: String

  """
  This user profile's daytime phone number.
  """
  day_phone: String

  """
  This user profile's evening phone number.
  """
  evening_phone: String

  """
  This user profile's first name.
  """
  first_name: String

  """
  An object in JSON format, where the keys are form fields on the UserConProfile form for this convention and the
  values are the appropriate values to be set on those fields for this user profile.
  """
  form_response_attrs_json: String

  """
  Has this user enabled Gravatars for this profile?
  """
  gravatar_enabled: Boolean

  """
  This user profile's last name.
  """
  last_name: String

  """
  This user profile's nickname.
  """
  nickname: String

  """
  The method by which this user profile prefers the convention contact them.
  """
  preferred_contact: String

  """
  If this user can't be signed up for any of their ranked choices, should the site waitlist them?
  """
  ranked_choice_allow_waitlist: Boolean

  """
  Should this profile's bio use the nickname as part of their name?
  """
  show_nickname_in_bio: Boolean

  """
  The state portion of this profile's mailing address.
  """
  state: String

  """
  The ZIP portion of this profile's mailing address.
  """
  zipcode: String
}

type UserConProfilesPagination implements PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!
  entries: [UserConProfile!]!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

input UserFiltersInput {
  email: String
  first_name: String
  last_name: String
  name: String
  privileges: [String!]
}

type UsersPagination implements PaginationInterface {
  """
  The number of the page currently being returned in this query
  """
  current_page: Int!
  entries: [User!]!

  """
  The number of items per page currently being returned in this query
  """
  per_page: Int!

  """
  The total number of items in the paginated list (across all pages)
  """
  total_entries: Int!

  """
  The total number of pages in the paginated list
  """
  total_pages: Int!
}

input WinningUserConProfileInput {
  conventionId: ID
  userConProfileId: ID
}

"""
Autogenerated input type of WithdrawAllUserConProfileSignups
"""
input WithdrawAllUserConProfileSignupsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userConProfileId: ID
}

"""
Autogenerated return type of WithdrawAllUserConProfileSignups.
"""
type WithdrawAllUserConProfileSignupsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user_con_profile: UserConProfile!
}

"""
Autogenerated input type of WithdrawMySignup
"""
input WithdrawMySignupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  runId: ID
}

"""
Autogenerated return type of WithdrawMySignup.
"""
type WithdrawMySignupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signup: Signup!
}

"""
Autogenerated input type of WithdrawSignupRequest
"""
input WithdrawSignupRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of WithdrawSignupRequest.
"""
type WithdrawSignupRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signup_request: SignupRequest!
}

"""
Autogenerated input type of WithdrawUserSignup
"""
input WithdrawUserSignupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  runId: ID
  suppress_confirmation: Boolean
  suppress_notifications: Boolean
  userConProfileId: ID
}

"""
Autogenerated return type of WithdrawUserSignup.
"""
type WithdrawUserSignupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signup: Signup!
}
